# 0.16.29-from-flog
data1 = {
  'nn::spl::detail::IRandomInterface': {
        0: {},
  },
  'nn::fssrv::sf::IFileSystemProxy': {
        0: {},
        1: {},
        2: {},
       11: {},
       12: {},
       13: {},
       17: {},
       18: {},
       21: {},
       22: {},
       23: {},
       24: {},
       30: {},
       31: {},
       51: {},
       52: {},
       58: {},
       60: {},
       61: {},
       80: {},
      100: {},
      110: {},
      200: {},
      202: {},
      203: {},
      400: {},
      500: {},
      501: {},
      600: {},
      601: {},
      602: {},
      603: {},
      604: {},
      605: {},
     1000: {},
     1001: {},
     1002: {},
     1003: {},
     1004: {},
     1005: {},
     1006: {},
  },
  'nn::fssrv::sf::IFileSystem': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
  },
  'nn::fssrv::sf::IFile': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
  },
  'nn::fssrv::sf::IDirectory': {
        0: {},
        1: {},
  },
  'nn::fssrv::sf::IStorage': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
  },
  'nn::fssrv::sf::ISaveDataInfoReader': {
        0: {},
  },
  'nn::fssrv::sf::IDeviceOperator': {
        0: {},
        1: {},
      100: {},
      101: {},
      110: {},
      111: {},
      200: {},
      201: {},
      202: {},
      203: {},
      204: {},
      205: {},
      206: {},
      207: {},
      208: {},
      209: {},
      210: {},
      211: {},
      300: {},
      301: {},
  },
  'nn::fssrv::sf::IEventNotifier': {
        0: {},
  },
  'nn::fssrv::sf::IFileSystemProxyForLoader': {
        0: {},
        1: {},
  },
  'nn::fssrv::sf::IProgramRegistry': {
        0: {},
        1: {},
      256: {},
  },
  'nn::tma::IHtcManager': {
        0: {},
        1: {},
        2: {},
  },
  'nn::htc::tenv::IServiceManager': {
        0: {},
  },
  'nn::htc::tenv::IService': {
        0: {},
        1: {},
        2: {},
  },
  'nn::ldr::detail::IRoInterface': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
  },
  'nn::sm::detail::IUserInterface': {
        0: {},
        1: {},
        2: {},
        3: {},
  },
  'nn::sm::detail::IManagerInterface': {
        0: {},
        1: {},
  },
  'nn::socket::sf::IClient': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
       14: {},
       15: {},
       16: {},
       17: {},
       18: {},
       19: {},
       20: {},
       21: {},
       22: {},
       23: {},
       24: {},
       25: {},
       26: {},
       27: {},
       28: {},
  },
  'nn::socket::sf::IClient': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
       14: {},
       15: {},
       16: {},
       17: {},
       18: {},
       19: {},
       20: {},
       21: {},
       22: {},
       23: {},
       24: {},
       25: {},
       26: {},
       27: {},
       28: {},
  },
  'nn::socket::resolver::IResolver': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
  },
  'nn::account::IAccountServiceForApplication': {
        0: {"name": 'GetUserCount', "args": 'Out<int, void>'},
        1: {"name": 'GetUserExistence', "args": 'Out<bool, void>, nn::account::Uid const&'},
        2: {"name": 'ListAllUsers', "args": 'OutArray<nn::account::Uid> const&'},
        3: {"name": 'ListOpenUsers', "args": 'OutArray<nn::account::Uid> const&'},
        4: {"name": 'GetLastOpenedUser', "args": 'Out<nn::account::Uid, void>'},
        5: {"name": 'GetProfile', "args": 'Out<SharedPointer<nn::account::profile::IProfile>, void>, nn::account::Uid const&'},
       50: {"name": 'IsUserRegistrationRequestPermitted', "args": 'Out<bool, void>, unsigned long'},
       51: {"name": 'TrySelectUserWithoutInteraction', "args": 'Out<nn::account::Uid, void>, bool'},
      100: {"name": 'InitializeApplicationInfo', "args": 'unsigned long'},
      101: {"name": 'GetBaasAccountManagerForApplication', "args": 'Out<SharedPointer<nn::account::baas::IManagerForApplication>, void>, nn::account::Uid const&'},
      102: {"name": 'AuthenticateApplicationAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      110: {"name": 'StoreSaveDataThumbnail', "args": 'nn::account::Uid const&, InBuffer const&'},
      111: {"name": 'ClearSaveDataThumbnail', "args": 'nn::account::Uid const&'},
      120: {"name": 'CreateGuestLoginRequest', "args": 'Out<SharedPointer<nn::account::baas::IGuestLoginRequest>, void>, NativeHandle&&, unsigned int'},
  },
  'nn::account::profile::IProfile': {
        0: {"name": 'Get', "args": 'Out<nn::account::profile::ProfileBase, void>, Out<nn::account::profile::UserData, void>'},
        1: {"name": 'GetBase', "args": 'Out<nn::account::profile::ProfileBase, void>'},
       10: {"name": 'GetImageSize', "args": 'Out<unsigned int, void>'},
       11: {"name": 'LoadImage', "args": 'Out<unsigned int, void>, OutBuffer const&'},
  },
  'nn::account::baas::IManagerForApplication': {
        0: {"name": 'CheckAvailability', "args": ''},
        1: {"name": 'GetAccountId', "args": 'Out<nn::account::NetworkServiceAccountId, void>'},
        2: {"name": 'EnsureIdTokenCacheAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
        3: {"name": 'LoadIdTokenCache', "args": 'Out<unsigned int, void>, OutBuffer const&'},
      130: {"name": 'GetNintendoAccountUserResourceCacheForApplication', "args": 'Out<nn::account::NintendoAccountId, void>, Out<nn::account::nas::NasUserBaseForApplication, void>, OutBuffer const&'},
      150: {"name": 'CreateAuthorizationRequest', "args": 'Out<SharedPointer<nn::account::nas::IAuthorizationRequest>, void>, nn::account::NintendoAccountAuthorizationRequestParameters const&, NativeHandle&&, unsigned int'},
  },
  'nn::account::detail::IAsyncContext': {
        0: {"name": 'GetSystemEvent', "args": 'Out<NativeHandle, void>'},
        1: {"name": 'Cancel', "args": ''},
        2: {"name": 'HasDone', "args": 'Out<bool, void>'},
        3: {"name": 'GetResult', "args": ''},
  },
  'nn::account::nas::IAuthorizationRequest': {
        0: {"name": 'GetSessionId', "args": 'Out<nn::account::detail::Uuid, void>'},
       10: {"name": 'InvokeWithoutInteractionAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
       20: {"name": 'GetAuthorizationCode', "args": 'Out<unsigned int, void>, OutBuffer const&'},
       21: {"name": 'GetIdToken', "args": 'Out<unsigned int, void>, OutBuffer const&'},
       22: {"name": 'GetState', "args": 'Out<nn::account::nas::State, void>'},
  },
  'nn::account::baas::IGuestLoginRequest': {
        0: {"name": 'GetSessionId', "args": 'Out<nn::account::detail::Uuid, void>'},
       11: {"name": 'GetIdTokenCache', "args": 'Out<unsigned int, void>, OutBuffer const&'},
       12: {"name": 'GetAccountId', "args": 'Out<nn::account::NetworkServiceAccountId, void>'},
       13: {"name": 'GetLinkedNintendoAccountId', "args": 'Out<nn::account::NintendoAccountId, void>'},
       14: {"name": 'GetNickname', "args": 'OutArray<char> const&'},
       15: {"name": 'GetProfileImage', "args": 'Out<unsigned int, void>, OutBuffer const&'},
  },
  'nn::account::IAccountServiceForSystemService': {
        0: {"name": 'GetUserCount', "args": 'Out<int, void>'},
        1: {"name": 'GetUserExistence', "args": 'Out<bool, void>, nn::account::Uid const&'},
        2: {"name": 'ListAllUsers', "args": 'OutArray<nn::account::Uid> const&'},
        3: {"name": 'ListOpenUsers', "args": 'OutArray<nn::account::Uid> const&'},
        4: {"name": 'GetLastOpenedUser', "args": 'Out<nn::account::Uid, void>'},
        5: {"name": 'GetProfile', "args": 'Out<SharedPointer<nn::account::profile::IProfile>, void>, nn::account::Uid const&'},
       50: {"name": 'IsUserRegistrationRequestPermitted', "args": 'Out<bool, void>, unsigned long'},
       51: {"name": 'TrySelectUserWithoutInteraction', "args": 'Out<nn::account::Uid, void>, bool'},
      100: {"name": 'GetUserRegistrationNotifier', "args": 'Out<SharedPointer<nn::account::detail::INotifier>, void>'},
      101: {"name": 'GetUserStateChangeNotifier', "args": 'Out<SharedPointer<nn::account::detail::INotifier>, void>'},
      102: {"name": 'GetBaasAccountManagerForSystemService', "args": 'Out<SharedPointer<nn::account::baas::IManagerForSystemService>, void>, nn::account::Uid const&'},
      103: {"name": 'GetBaasUserAvailabilityChangeNotifier', "args": 'Out<SharedPointer<nn::account::detail::INotifier>, void>'},
      110: {"name": 'StoreSaveDataThumbnail', "args": 'nn::account::Uid const&, nn::ApplicationId, InBuffer const&'},
      111: {"name": 'ClearSaveDataThumbnail', "args": 'nn::account::Uid const&, nn::ApplicationId'},
      112: {"name": 'LoadSaveDataThumbnail', "args": 'Out<unsigned int, void>, OutBuffer const&, nn::account::Uid const&, nn::ApplicationId'},
      190: {"name": 'GetUserLastOpenedApplication', "args": 'Out<nn::ApplicationId, void>, Out<unsigned int, void>, nn::account::Uid const&'},
      998: {"name": 'DebugSetUserStateClose', "args": 'nn::account::Uid const&'},
      999: {"name": 'DebugSetUserStateOpen', "args": 'nn::account::Uid const&'},
  },
  'nn::account::detail::INotifier': {
        0: {"name": 'GetSystemEvent', "args": 'Out<NativeHandle, void>'},
  },
  'nn::account::baas::IManagerForSystemService': {
        0: {"name": 'CheckAvailability', "args": ''},
        1: {"name": 'GetAccountId', "args": 'Out<nn::account::NetworkServiceAccountId, void>'},
        2: {"name": 'EnsureIdTokenCacheAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
        3: {"name": 'LoadIdTokenCache', "args": 'Out<unsigned int, void>, OutBuffer const&'},
      100: {"name": 'SetSystemProgramIdentification', "args": 'nn::account::SystemProgramIdentification const&, unsigned long'},
      120: {"name": 'GetNintendoAccountId', "args": 'Out<nn::account::NintendoAccountId, void>'},
      130: {"name": 'GetNintendoAccountUserResourceCache', "args": 'Out<nn::account::NintendoAccountId, void>, Out<nn::account::nas::NasUserBase, void>, OutBuffer const&'},
      131: {"name": 'RefreshNintendoAccountUserResourceCacheAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      132: {"name": 'RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed', "args": 'Out<bool, void>, Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, unsigned int'},
      150: {"name": 'CreateAuthorizationRequest', "args": 'Out<SharedPointer<nn::account::nas::IAuthorizationRequest>, void>, nn::account::nas::NasClientInfo const&, nn::account::NintendoAccountAuthorizationRequestParameters const&, NativeHandle&&, unsigned int'},
  },
  'nn::account::IAccountServiceForAdministrator': {
        0: {"name": 'GetUserCount', "args": 'Out<int, void>'},
        1: {"name": 'GetUserExistence', "args": 'Out<bool, void>, nn::account::Uid const&'},
        2: {"name": 'ListAllUsers', "args": 'OutArray<nn::account::Uid> const&'},
        3: {"name": 'ListOpenUsers', "args": 'OutArray<nn::account::Uid> const&'},
        4: {"name": 'GetLastOpenedUser', "args": 'Out<nn::account::Uid, void>'},
        5: {"name": 'GetProfile', "args": 'Out<SharedPointer<nn::account::profile::IProfile>, void>, nn::account::Uid const&'},
       50: {"name": 'IsUserRegistrationRequestPermitted', "args": 'Out<bool, void>, unsigned long'},
       51: {"name": 'TrySelectUserWithoutInteraction', "args": 'Out<nn::account::Uid, void>, bool'},
      100: {"name": 'GetUserRegistrationNotifier', "args": 'Out<SharedPointer<nn::account::detail::INotifier>, void>'},
      101: {"name": 'GetUserStateChangeNotifier', "args": 'Out<SharedPointer<nn::account::detail::INotifier>, void>'},
      102: {"name": 'GetBaasAccountManagerForSystemService', "args": 'Out<SharedPointer<nn::account::baas::IManagerForSystemService>, void>, nn::account::Uid const&'},
      103: {"name": 'GetBaasUserAvailabilityChangeNotifier', "args": 'Out<SharedPointer<nn::account::detail::INotifier>, void>'},
      110: {"name": 'StoreSaveDataThumbnail', "args": 'nn::account::Uid const&, nn::ApplicationId, InBuffer const&'},
      111: {"name": 'ClearSaveDataThumbnail', "args": 'nn::account::Uid const&, nn::ApplicationId'},
      112: {"name": 'LoadSaveDataThumbnail', "args": 'Out<unsigned int, void>, OutBuffer const&, nn::account::Uid const&, nn::ApplicationId'},
      190: {"name": 'GetUserLastOpenedApplication', "args": 'Out<nn::ApplicationId, void>, Out<unsigned int, void>, nn::account::Uid const&'},
      998: {"name": 'DebugSetUserStateClose', "args": 'nn::account::Uid const&'},
      999: {"name": 'DebugSetUserStateOpen', "args": 'nn::account::Uid const&'},
      200: {"name": 'BeginUserRegistration', "args": 'Out<nn::account::Uid, void>'},
      201: {"name": 'CompleteUserRegistration', "args": 'nn::account::Uid const&'},
      202: {"name": 'CancelUserRegistration', "args": 'nn::account::Uid const&'},
      203: {"name": 'DeleteUser', "args": 'nn::account::Uid const&'},
      204: {"name": 'SetUserPosition', "args": 'nn::account::Uid const&, int'},
      205: {"name": 'GetProfileEditor', "args": 'Out<SharedPointer<nn::account::profile::IProfileEditor>, void>, nn::account::Uid const&'},
      230: {"name": 'AuthenticateServiceAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      250: {"name": 'GetBaasAccountAdministrator', "args": 'Out<SharedPointer<nn::account::baas::IAdministrator>, void>, nn::account::Uid const&'},
      290: {"name": 'ProxyProcedureToLoginAsGuestWithNintendoAccount', "args": 'Out<SharedPointer<nn::account::nas::IOAuthProcedureForGuestLogin>, void>, nn::account::detail::Uuid const&'},
  },
  'nn::account::profile::IProfileEditor': {
        0: {"name": 'Get', "args": 'Out<nn::account::profile::ProfileBase, void>, Out<nn::account::profile::UserData, void>'},
        1: {"name": 'GetBase', "args": 'Out<nn::account::profile::ProfileBase, void>'},
       10: {"name": 'GetImageSize', "args": 'Out<unsigned int, void>'},
       11: {"name": 'LoadImage', "args": 'Out<unsigned int, void>, OutBuffer const&'},
      100: {"name": 'Store', "args": 'nn::account::profile::ProfileBase const&, nn::account::profile::UserData const&'},
      101: {"name": 'StoreWithImage', "args": 'nn::account::profile::ProfileBase const&, nn::account::profile::UserData const&, InBuffer const&'},
  },
  'nn::account::baas::IAdministrator': {
        0: {"name": 'CheckAvailability', "args": ''},
        1: {"name": 'GetAccountId', "args": 'Out<nn::account::NetworkServiceAccountId, void>'},
        2: {"name": 'EnsureIdTokenCacheAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
        3: {"name": 'LoadIdTokenCache', "args": 'Out<unsigned int, void>, OutBuffer const&'},
      100: {"name": 'SetSystemProgramIdentification', "args": 'nn::account::SystemProgramIdentification const&, unsigned long'},
      120: {"name": 'GetNintendoAccountId', "args": 'Out<nn::account::NintendoAccountId, void>'},
      130: {"name": 'GetNintendoAccountUserResourceCache', "args": 'Out<nn::account::NintendoAccountId, void>, Out<nn::account::nas::NasUserBase, void>, OutBuffer const&'},
      131: {"name": 'RefreshNintendoAccountUserResourceCacheAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      132: {"name": 'RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed', "args": 'Out<bool, void>, Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, unsigned int'},
      150: {"name": 'CreateAuthorizationRequest', "args": 'Out<SharedPointer<nn::account::nas::IAuthorizationRequest>, void>, nn::account::nas::NasClientInfo const&, nn::account::NintendoAccountAuthorizationRequestParameters const&, NativeHandle&&, unsigned int'},
      200: {"name": 'IsRegistered', "args": 'Out<bool, void>'},
      201: {"name": 'RegisterAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      202: {"name": 'UnregisterAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      203: {"name": 'DeleteRegistrationInfoLocally', "args": ''},
      220: {"name": 'SynchronizeProfileAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      250: {"name": 'IsLinkedWithNintendoAccount', "args": 'Out<bool, void>'},
      251: {"name": 'CreateProcedureToLinkWithNintendoAccount', "args": 'Out<SharedPointer<nn::account::nas::IOAuthProcedureForNintendoAccountLinkage>, void>'},
      252: {"name": 'ResumeProcedureToLinkWithNintendoAccount', "args": 'Out<SharedPointer<nn::account::nas::IOAuthProcedureForNintendoAccountLinkage>, void>, nn::account::detail::Uuid const&'},
      255: {"name": 'CreateProcedureToUpdateLinkageStateOfNintendoAccount', "args": 'Out<SharedPointer<nn::account::http::IOAuthProcedure>, void>'},
      256: {"name": 'ResumeProcedureToUpdateLinkageStateOfNintendoAccount', "args": 'Out<SharedPointer<nn::account::http::IOAuthProcedure>, void>, nn::account::detail::Uuid const&'},
      280: {"name": 'ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount', "args": 'Out<SharedPointer<nn::account::http::IOAuthProcedure>, void>, nn::account::detail::Uuid const&'},
      997: {"name": 'DebugUnlinkNintendoAccountAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
      998: {"name": 'DebugSetAvailabilityErrorDetail', "args": 'unsigned int'},
      999: {"name": 'DebugUploadProfileAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
  },
  'nn::account::nas::IOAuthProcedureForNintendoAccountLinkage': {
        0: {"name": 'PrepareAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
        1: {"name": 'GetRequest', "args": 'Out<nn::account::RequestUrl, void>, Out<nn::account::CallbackUri, void>'},
        2: {"name": 'ApplyResponse', "args": 'InArray<char> const&'},
        3: {"name": 'ApplyResponseAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, InArray<char> const&'},
       10: {"name": 'Suspend', "args": 'Out<nn::account::detail::Uuid, void>'},
      100: {"name": 'GetRequestWithTheme', "args": 'Out<nn::account::RequestUrl, void>, Out<nn::account::CallbackUri, void>, int'},
      101: {"name": 'IsNetworkServiceAccountReplaced', "args": 'Out<bool, void>'},
  },
  'nn::account::http::IOAuthProcedure': {
        0: {"name": 'PrepareAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
        1: {"name": 'GetRequest', "args": 'Out<nn::account::RequestUrl, void>, Out<nn::account::CallbackUri, void>'},
        2: {"name": 'ApplyResponse', "args": 'InArray<char> const&'},
        3: {"name": 'ApplyResponseAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, InArray<char> const&'},
       10: {"name": 'Suspend', "args": 'Out<nn::account::detail::Uuid, void>'},
  },
  'nn::account::nas::IOAuthProcedureForGuestLogin': {
        0: {"name": 'PrepareAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>'},
        1: {"name": 'GetRequest', "args": 'Out<nn::account::RequestUrl, void>, Out<nn::account::CallbackUri, void>'},
        2: {"name": 'ApplyResponse', "args": 'InArray<char> const&'},
        3: {"name": 'ApplyResponseAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, InArray<char> const&'},
       10: {"name": 'Suspend', "args": 'Out<nn::account::detail::Uuid, void>'},
      100: {"name": 'GetAccountId', "args": 'Out<nn::account::NetworkServiceAccountId, void>'},
      101: {"name": 'GetLinkedNintendoAccountId', "args": 'Out<nn::account::NintendoAccountId, void>'},
      102: {"name": 'GetNickname', "args": 'OutArray<char> const&'},
      103: {"name": 'GetProfileImage', "args": 'Out<unsigned int, void>, OutBuffer const&'},
  },
  'nn::account::IBaasAccessTokenAccessor': {
        0: {"name": 'EnsureCacheAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, nn::account::Uid const&'},
        1: {"name": 'LoadCache', "args": 'Out<unsigned int, void>, OutBuffer const&, nn::account::Uid const&'},
        2: {"name": 'GetDeviceAccountId', "args": 'Out<unsigned long, void>, nn::account::Uid const&'},
       50: {"name": 'RegisterNotificationTokenAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, nn::account::Uid const&, nn::npns::NotificationToken const&'},
       51: {"name": 'UnregisterNotificationTokenAsync', "args": 'Out<SharedPointer<nn::account::detail::IAsyncContext>, void>, nn::account::Uid const&'},
  },
  'nn::account::detail::IAsyncContext': {
        0: {"name": 'GetSystemEvent', "args": 'Out<NativeHandle, void>'},
        1: {"name": 'Cancel', "args": ''},
        2: {"name": 'HasDone', "args": 'Out<bool, void>'},
        3: {"name": 'GetResult', "args": ''},
  },
  'nn::am::service::IAllSystemAppletProxiesService': {
      100: {"name": 'OpenSystemAppletProxy', "args": 'Out<SharedPointer<nn::am::service::ISystemAppletProxy>, void>, unsigned long, NativeHandle&&'},
      200: {"name": 'OpenLibraryAppletProxy', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletProxy>, void>, unsigned long, NativeHandle&&'},
      300: {"name": 'OpenOverlayAppletProxy', "args": 'Out<SharedPointer<nn::am::service::IOverlayAppletProxy>, void>, unsigned long, NativeHandle&&'},
      350: {"name": 'OpenSystemApplicationProxy', "args": 'Out<SharedPointer<nn::am::service::IApplicationProxy>, void>, unsigned long, NativeHandle&&'},
      400: {"name": 'CreateSelfLibraryAppletCreatorForDevelop', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletCreator>, void>, unsigned long'},
  },
  'nn::am::service::ISystemAppletProxy': {
        0: {"name": 'GetCommonStateGetter', "args": 'Out<SharedPointer<nn::am::service::ICommonStateGetter>, void>'},
        1: {"name": 'GetSelfController', "args": 'Out<SharedPointer<nn::am::service::ISelfController>, void>'},
        2: {"name": 'GetWindowController', "args": 'Out<SharedPointer<nn::am::service::IWindowController>, void>'},
        3: {"name": 'GetAudioController', "args": 'Out<SharedPointer<nn::am::service::IAudioController>, void>'},
        4: {"name": 'GetDisplayController', "args": 'Out<SharedPointer<nn::am::service::IDisplayController>, void>'},
     1000: {"name": 'GetDebugFunctions', "args": 'Out<SharedPointer<nn::am::service::IDebugFunctions>, void>'},
       10: {"name": 'GetProcessWindingController', "args": 'Out<SharedPointer<nn::am::service::IProcessWindingController>, void>'},
       11: {"name": 'GetLibraryAppletCreator', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletCreator>, void>'},
       20: {"name": 'GetHomeMenuFunctions', "args": 'Out<SharedPointer<nn::am::service::IHomeMenuFunctions>, void>'},
       21: {"name": 'GetGlobalStateController', "args": 'Out<SharedPointer<nn::am::service::IGlobalStateController>, void>'},
       22: {"name": 'GetApplicationCreator', "args": 'Out<SharedPointer<nn::am::service::IApplicationCreator>, void>'},
  },
  'nn::am::service::ICommonStateGetter': {
        0: {"name": 'GetEventHandle', "args": 'Out<NativeHandle, void>'},
        1: {"name": 'ReceiveMessage', "args": 'Out<nn::am::AppletMessage, void>'},
        2: {"name": 'GetThisAppletKind', "args": 'Out<nn::am::service::AppletKind, void>'},
        3: {"name": 'AllowToEnterSleep', "args": ''},
        4: {"name": 'DisallowToEnterSleep', "args": ''},
        5: {"name": 'GetOperationMode', "args": 'Out<unsigned char, void>'},
        6: {"name": 'GetPerformanceMode', "args": 'Out<unsigned int, void>'},
        7: {"name": 'GetCradleStatus', "args": 'Out<unsigned char, void>'},
        8: {"name": 'GetBootMode', "args": 'Out<unsigned char, void>'},
        9: {"name": 'GetCurrentFocusState', "args": 'Out<unsigned char, void>'},
       10: {"name": 'RequestToAcquireSleepLock', "args": ''},
       11: {"name": 'ReleaseSleepLock', "args": ''},
       12: {"name": 'ReleaseSleepLockTransiently', "args": ''},
       13: {"name": 'GetAcquiredSleepLockEvent', "args": 'Out<NativeHandle, void>'},
       20: {"name": 'PushToGeneralChannel', "args": 'SharedPointer<nn::am::service::IStorage>'},
       30: {"name": 'GetHomeButtonReaderLockAccessor', "args": 'Out<SharedPointer<nn::am::service::ILockAccessor>, void>'},
  },
  'nn::am::service::ILockAccessor': {
        1: {"name": 'TryLock', "args": 'Out<bool, void>, Out<NativeHandle, void>, bool'},
        2: {"name": 'Unlock', "args": ''},
        3: {"name": 'GetEvent', "args": 'Out<NativeHandle, void>'},
  },
  'nn::am::service::ISelfController': {
        0: {"name": 'Exit', "args": ''},
        1: {"name": 'LockExit', "args": ''},
        2: {"name": 'UnlockExit', "args": ''},
        9: {"name": 'GetLibraryAppletLaunchableEvent', "args": 'Out<NativeHandle, void>'},
       10: {"name": 'SetScreenShotPermission', "args": 'int'},
       11: {"name": 'SetOperationModeChangedNotification', "args": 'bool'},
       12: {"name": 'SetPerformanceModeChangedNotification', "args": 'bool'},
       13: {"name": 'SetFocusHandlingMode', "args": 'bool, bool, bool'},
       14: {"name": 'SetRestartMessageEnabled', "args": 'bool'},
       40: {"name": 'CreateManagedDisplayLayer', "args": 'Out<unsigned long, void>'},
       50: {"name": 'SetHandlesRequestToDisplay', "args": 'bool'},
       51: {"name": 'ApproveToDisplay', "args": ''},
       60: {"name": 'OverrideAutoSleepTimeAndDimmingTime', "args": 'int, int, int, int'},
       61: {"name": 'SetMediaPlaybackState', "args": 'bool'},
       62: {"name": 'SetIdleTimeDetectionExtension', "args": 'unsigned int'},
       63: {"name": 'GetIdleTimeDetectionExtension', "args": 'Out<unsigned int, void>'},
       64: {"name": 'SetInputDetectionSourceSet', "args": 'unsigned int'},
  },
  'nn::am::service::IWindowController': {
        0: {"name": 'CreateWindow', "args": 'Out<SharedPointer<nn::am::service::IWindow>, void>, nn::am::service::WindowCreationOption'},
        1: {"name": 'GetAppletResourceUserId', "args": 'Out<nn::applet::AppletResourceUserId, void>'},
       10: {"name": 'AcquireForegroundRights', "args": ''},
       11: {"name": 'ReleaseForegroundRights', "args": ''},
       12: {"name": 'RejectToChangeIntoBackground', "args": ''},
  },
  'nn::am::service::IWindow': {
  },
  'nn::am::service::IAudioController': {
        0: {"name": 'SetExpectedMasterVolume', "args": 'float, float'},
        1: {"name": 'GetMainAppletExpectedMasterVolume', "args": 'Out<float, void>'},
        2: {"name": 'GetLibraryAppletExpectedMasterVolume', "args": 'Out<float, void>'},
        3: {"name": 'ChangeMainAppletMasterVolume', "args": 'float, long'},
        4: {"name": 'SetTransparentVolumeRate', "args": 'float'},
  },
  'nn::am::service::IDisplayController': {
        0: {"name": 'GetLastForegroundCaptureImage', "args": 'OutBuffer const&'},
        1: {"name": 'UpdateLastForegroundCaptureImage', "args": ''},
        2: {"name": 'GetLastApplicationCaptureImage', "args": 'OutBuffer const&'},
        3: {"name": 'GetCallerAppletCaptureImage', "args": 'OutBuffer const&'},
        4: {"name": 'UpdateCallerAppletCaptureImage', "args": ''},
        5: {"name": 'GetLastForegroundCaptureImageEx', "args": 'Out<bool, void>, OutBuffer const&'},
        6: {"name": 'GetLastApplicationCaptureImageEx', "args": 'Out<bool, void>, OutBuffer const&'},
        7: {"name": 'GetCallerAppletCaptureImageEx', "args": 'Out<bool, void>, OutBuffer const&'},
       10: {"name": 'AcquireLastApplicationCaptureBuffer', "args": 'Out<NativeHandle, void>'},
       11: {"name": 'ReleaseLastApplicationCaptureBuffer', "args": ''},
       12: {"name": 'AcquireLastForegroundCaptureBuffer', "args": 'Out<NativeHandle, void>'},
       13: {"name": 'ReleaseLastForegroundCaptureBuffer', "args": ''},
       14: {"name": 'AcquireCallerAppletCaptureBuffer', "args": 'Out<NativeHandle, void>'},
       15: {"name": 'ReleaseCallerAppletCaptureBuffer', "args": ''},
       16: {"name": 'AcquireLastApplicationCaptureBufferEx', "args": 'Out<bool, void>, Out<NativeHandle, void>'},
       17: {"name": 'AcquireLastForegroundCaptureBufferEx', "args": 'Out<bool, void>, Out<NativeHandle, void>'},
       18: {"name": 'AcquireCallerAppletCaptureBufferEx', "args": 'Out<bool, void>, Out<NativeHandle, void>'},
  },
  'nn::am::service::IDebugFunctions': {
        0: {"name": 'NotifyMessageToHomeMenuForDebug', "args": 'nn::am::AppletMessage'},
        1: {"name": 'OpenMainApplication', "args": 'Out<SharedPointer<nn::am::service::IApplicationAccessor>, void>'},
       10: {"name": 'EmulateButtonEvent', "args": 'nn::am::service::EmulatedButtonEvent'},
       20: {"name": 'InvalidateTransitionLayer', "args": ''},
  },
  'nn::am::service::IApplicationAccessor': {
        0: {"name": 'GetIntegratedAppletPointer', "args": 'Out<shared_ptr<nn::am::service::IntegratedApplet>, void>'},
        0: {"name": 'GetAppletStateChangedEvent', "args": 'Out<NativeHandle, void>'},
        1: {"name": 'IsCompleted', "args": 'Out<bool, void>'},
       10: {"name": 'Start', "args": ''},
       20: {"name": 'RequestExit', "args": ''},
       25: {"name": 'Terminate', "args": ''},
       30: {"name": 'GetResult', "args": ''},
      101: {"name": 'RequestForApplicationToGetForeground', "args": ''},
      110: {"name": 'TerminateAllLibraryApplets', "args": ''},
      111: {"name": 'AreAnyLibraryAppletsLeft', "args": 'Out<bool, void>'},
      112: {"name": 'GetCurrentLibraryApplet', "args": 'Out<SharedPointer<nn::am::service::IAppletAccessor>, void>'},
      120: {"name": 'GetApplicationId', "args": 'Out<nn::ncm::ApplicationId, void>'},
      121: {"name": 'PushLaunchParameter', "args": 'unsigned int, SharedPointer<nn::am::service::IStorage>'},
      122: {"name": 'GetApplicationControlProperty', "args": 'OutBuffer const&'},
  },
  'nn::am::service::IAppletAccessor': {
        0: {"name": 'GetIntegratedAppletPointer', "args": 'Out<shared_ptr<nn::am::service::IntegratedApplet>, void>'},
        0: {"name": 'GetAppletStateChangedEvent', "args": 'Out<NativeHandle, void>'},
        1: {"name": 'IsCompleted', "args": 'Out<bool, void>'},
       10: {"name": 'Start', "args": ''},
       20: {"name": 'RequestExit', "args": ''},
       25: {"name": 'Terminate', "args": ''},
       30: {"name": 'GetResult', "args": ''},
  },
  'nn::am::service::IProcessWindingController': {
        0: {"name": 'GetLaunchReason', "args": 'Out<nn::am::service::AppletProcessLaunchReason, void>'},
       11: {"name": 'OpenCallingLibraryApplet', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletAccessor>, void>'},
       21: {"name": 'PushContext', "args": 'SharedPointer<nn::am::service::IStorage>'},
       22: {"name": 'PopContext', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>'},
       23: {"name": 'CancelWindingReservation', "args": ''},
       30: {"name": 'WindAndDoReserved', "args": ''},
       40: {"name": 'ReserveToStartAndWaitAndUnwindThis', "args": 'SharedPointer<nn::am::service::ILibraryAppletAccessor>'},
  },
  'nn::am::service::ILibraryAppletAccessor': {
        0: {"name": 'GetIntegratedAppletPointer', "args": 'Out<shared_ptr<nn::am::service::IntegratedApplet>, void>'},
        0: {"name": 'GetAppletStateChangedEvent', "args": 'Out<NativeHandle, void>'},
        1: {"name": 'IsCompleted', "args": 'Out<bool, void>'},
       10: {"name": 'Start', "args": ''},
       20: {"name": 'RequestExit', "args": ''},
       25: {"name": 'Terminate', "args": ''},
       30: {"name": 'GetResult', "args": ''},
      100: {"name": 'PushInData', "args": 'SharedPointer<nn::am::service::IStorage>'},
      101: {"name": 'PopOutData', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>'},
      102: {"name": 'PushExtraStorage', "args": 'SharedPointer<nn::am::service::IStorage>'},
      103: {"name": 'PushInteractiveInData', "args": 'SharedPointer<nn::am::service::IStorage>'},
      104: {"name": 'PopInteractiveOutData', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>'},
      105: {"name": 'GetPopOutDataEvent', "args": 'Out<NativeHandle, void>'},
      106: {"name": 'GetPopInteractiveOutDataEvent', "args": 'Out<NativeHandle, void>'},
      110: {"name": 'NeedsToExitProcess', "args": 'Out<bool, void>'},
      120: {"name": 'GetLibraryAppletInfo', "args": 'Out<nn::am::service::LibraryAppletInfo, void>'},
      150: {"name": 'RequestForAppletToGetForeground', "args": ''},
  },
  'nn::am::service::IStorageAccessor': {
        0: {"name": 'GetSize', "args": 'Out<long, void>'},
       10: {"name": 'Write', "args": 'long, InBuffer const&'},
       11: {"name": 'Read', "args": 'long, OutBuffer const&'},
  },
  'nn::am::service::ILibraryAppletCreator': {
        0: {"name": 'CreateLibraryApplet', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletAccessor>, void>, unsigned int, unsigned int'},
        1: {"name": 'TerminateAllLibraryApplets', "args": ''},
        2: {"name": 'AreAnyLibraryAppletsLeft', "args": 'Out<bool, void>'},
       10: {"name": 'CreateStorage', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>, long'},
       11: {"name": 'CreateTransferMemoryStorage', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>, NativeHandle&&, long, bool'},
  },
  'nn::am::service::IHomeMenuFunctions': {
       10: {"name": 'RequestToGetForeground', "args": ''},
       11: {"name": 'LockForeground', "args": ''},
       12: {"name": 'UnlockForeground', "args": ''},
       20: {"name": 'PopFromGeneralChannel', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>'},
       21: {"name": 'GetPopFromGeneralChannelEvent', "args": 'Out<NativeHandle, void>'},
       30: {"name": 'GetHomeButtonWriterLockAccessor', "args": 'Out<SharedPointer<nn::am::service::ILockAccessor>, void>'},
  },
  'nn::am::service::IGlobalStateController': {
        0: {"name": 'RequestToEnterSleep', "args": ''},
        1: {"name": 'EnterSleep', "args": ''},
        2: {"name": 'StartSleepSequence', "args": 'bool'},
        3: {"name": 'StartShutdownSequence', "args": ''},
        4: {"name": 'StartRebootSequence', "args": ''},
       10: {"name": 'LoadAndApplyIdlePolicySettings', "args": ''},
  },
  'nn::am::service::IApplicationCreator': {
        0: {"name": 'CreateApplication', "args": 'Out<SharedPointer<nn::am::service::IApplicationAccessor>, void>, nn::ncm::ApplicationId'},
        1: {"name": 'PopLaunchRequestedApplication', "args": 'Out<SharedPointer<nn::am::service::IApplicationAccessor>, void>'},
       10: {"name": 'CreateSystemApplication', "args": 'Out<SharedPointer<nn::am::service::IApplicationAccessor>, void>, nn::ncm::SystemApplicationId'},
      100: {"name": 'PopFloatingApplicationForDevelopment', "args": 'Out<SharedPointer<nn::am::service::IApplicationAccessor>, void>'},
  },
  'nn::am::service::ILibraryAppletProxy': {
        0: {"name": 'GetCommonStateGetter', "args": 'Out<SharedPointer<nn::am::service::ICommonStateGetter>, void>'},
        1: {"name": 'GetSelfController', "args": 'Out<SharedPointer<nn::am::service::ISelfController>, void>'},
        2: {"name": 'GetWindowController', "args": 'Out<SharedPointer<nn::am::service::IWindowController>, void>'},
        3: {"name": 'GetAudioController', "args": 'Out<SharedPointer<nn::am::service::IAudioController>, void>'},
        4: {"name": 'GetDisplayController', "args": 'Out<SharedPointer<nn::am::service::IDisplayController>, void>'},
     1000: {"name": 'GetDebugFunctions', "args": 'Out<SharedPointer<nn::am::service::IDebugFunctions>, void>'},
       10: {"name": 'GetProcessWindingController', "args": 'Out<SharedPointer<nn::am::service::IProcessWindingController>, void>'},
       11: {"name": 'GetLibraryAppletCreator', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletCreator>, void>'},
       20: {"name": 'OpenLibraryAppletSelfAccessor', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletSelfAccessor>, void>'},
  },
  'nn::am::service::ILibraryAppletSelfAccessor': {
        0: {"name": 'PopInData', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>'},
        1: {"name": 'PushOutData', "args": 'SharedPointer<nn::am::service::IStorage>'},
        2: {"name": 'PopInteractiveInData', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>'},
        3: {"name": 'PushInteractiveOutData', "args": 'SharedPointer<nn::am::service::IStorage>'},
        5: {"name": 'GetPopInDataEvent', "args": 'Out<NativeHandle, void>'},
        6: {"name": 'GetPopInteractiveInDataEvent', "args": 'Out<NativeHandle, void>'},
       20: {"name": 'PopExtraStorage', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>'},
       25: {"name": 'GetPopExtraStorageEvent', "args": 'Out<NativeHandle, void>'},
       30: {"name": 'UnpopInData', "args": 'SharedPointer<nn::am::service::IStorage>'},
       31: {"name": 'UnpopExtraStorage', "args": 'SharedPointer<nn::am::service::IStorage>'},
       10: {"name": 'ExitProcessAndReturn', "args": ''},
       11: {"name": 'GetLibraryAppletInfo', "args": 'Out<nn::am::service::LibraryAppletInfo, void>'},
       12: {"name": 'GetMainAppletIdentityInfo', "args": 'Out<nn::am::service::AppletIdentityInfo, void>'},
       13: {"name": 'CanUseApplicationCore', "args": 'Out<bool, void>'},
       14: {"name": 'GetCallerAppletIdentityInfo', "args": 'Out<nn::am::service::AppletIdentityInfo, void>'},
  },
  'nn::am::service::IOverlayAppletProxy': {
        0: {"name": 'GetCommonStateGetter', "args": 'Out<SharedPointer<nn::am::service::ICommonStateGetter>, void>'},
        1: {"name": 'GetSelfController', "args": 'Out<SharedPointer<nn::am::service::ISelfController>, void>'},
        2: {"name": 'GetWindowController', "args": 'Out<SharedPointer<nn::am::service::IWindowController>, void>'},
        3: {"name": 'GetAudioController', "args": 'Out<SharedPointer<nn::am::service::IAudioController>, void>'},
        4: {"name": 'GetDisplayController', "args": 'Out<SharedPointer<nn::am::service::IDisplayController>, void>'},
     1000: {"name": 'GetDebugFunctions', "args": 'Out<SharedPointer<nn::am::service::IDebugFunctions>, void>'},
       10: {"name": 'GetProcessWindingController', "args": 'Out<SharedPointer<nn::am::service::IProcessWindingController>, void>'},
       11: {"name": 'GetLibraryAppletCreator', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletCreator>, void>'},
       20: {"name": 'GetOverlayFunctions', "args": 'Out<SharedPointer<nn::am::service::IOverlayFunctions>, void>'},
  },
  'nn::am::service::IOverlayFunctions': {
        0: {"name": 'BeginToWatchShortHomeButtonMessage', "args": ''},
        1: {"name": 'EndToWatchShortHomeButtonMessage', "args": ''},
        2: {"name": 'GetApplicationIdForLogo', "args": 'Out<nn::ncm::ApplicationId, void>'},
        3: {"name": 'SetGpuTimeSliceBoost', "args": 'unsigned long'},
  },
  'nn::am::service::IApplicationProxy': {
        0: {"name": 'GetCommonStateGetter', "args": 'Out<SharedPointer<nn::am::service::ICommonStateGetter>, void>'},
        1: {"name": 'GetSelfController', "args": 'Out<SharedPointer<nn::am::service::ISelfController>, void>'},
        2: {"name": 'GetWindowController', "args": 'Out<SharedPointer<nn::am::service::IWindowController>, void>'},
        3: {"name": 'GetAudioController', "args": 'Out<SharedPointer<nn::am::service::IAudioController>, void>'},
        4: {"name": 'GetDisplayController', "args": 'Out<SharedPointer<nn::am::service::IDisplayController>, void>'},
     1000: {"name": 'GetDebugFunctions', "args": 'Out<SharedPointer<nn::am::service::IDebugFunctions>, void>'},
       10: {"name": 'GetProcessWindingController', "args": 'Out<SharedPointer<nn::am::service::IProcessWindingController>, void>'},
       11: {"name": 'GetLibraryAppletCreator', "args": 'Out<SharedPointer<nn::am::service::ILibraryAppletCreator>, void>'},
       20: {"name": 'GetApplicationFunctions', "args": 'Out<SharedPointer<nn::am::service::IApplicationFunctions>, void>'},
  },
  'nn::am::service::IApplicationFunctions': {
        1: {"name": 'PopLaunchParameter', "args": 'Out<SharedPointer<nn::am::service::IStorage>, void>, unsigned int'},
       10: {"name": 'CreateApplicationAndPushAndRequestToStart', "args": 'nn::ncm::ApplicationId, SharedPointer<nn::am::service::IStorage>'},
       20: {"name": 'EnsureSaveData', "args": 'Out<long, void>, nn::account::Uid const&'},
       21: {"name": 'GetDesiredLanguage', "args": 'Out<nn::settings::LanguageCode, void>'},
       22: {"name": 'SetTerminateResult', "args": 'unsigned int'},
       23: {"name": 'GetDisplayVersion', "args": 'Out<nn::oe::DisplayVersion, void>'},
       30: {"name": 'BeginBlockingHomeButton', "args": 'long'},
       31: {"name": 'EndBlockingHomeButton', "args": ''},
       40: {"name": 'NotifyRunning', "args": 'Out<bool, void>'},
  },
  'nn::am::service::IApplicationProxyService': {
        0: {"name": 'OpenApplicationProxy', "args": 'Out<SharedPointer<nn::am::service::IApplicationProxy>, void>, unsigned long, NativeHandle&&'},
  },
  'nn::apm::IManager': {
        0: {"name": 'OpenSession', "args": 'Out<SharedPointer<nn::apm::ISession>, void>'},
        1: {"name": 'GetPerformanceMode', "args": 'Out<nn::apm::PerformanceMode, void>'},
  },
  'nn::apm::ISession': {
        0: {"name": 'SetPerformanceConfiguration', "args": 'nn::apm::PerformanceMode, nn::apm::PerformanceConfiguration'},
        1: {"name": 'GetPerformanceConfiguration', "args": 'Out<nn::apm::PerformanceConfiguration, void>, nn::apm::PerformanceMode'},
  },
  'nn::apm::ISystemManager': {
        0: {"name": 'RequestPerformanceMode', "args": 'nn::apm::PerformanceMode'},
        1: {"name": 'GetPerformanceEvent', "args": 'Out<NativeHandle, void>, nn::apm::EventTarget'},
  },
  'nn::apm::IManagerPrivileged': {
        0: {"name": 'OpenSession', "args": 'Out<SharedPointer<nn::apm::ISession>, void>'},
  },
  'nn::apm::IDebugManager': {
        0: {"name": 'GetThrottlingState', "args": 'Out<nn::apm::ThrottlingState, void>'},
        1: {"name": 'GetLastThrottlingState', "args": 'Out<nn::apm::ThrottlingState, void>'},
        2: {"name": 'ClearLastThrottlingState', "args": ''},
  },
  'nn::codec::detail::IHardwareOpusDecoderManager': {
        0: {},
        1: {},
  },
  'nn::codec::detail::IHardwareOpusDecoder': {
        0: {},
        1: {},
  },
  'nn::friends::detail::ipc::IFriendServiceCreator': {
        0: {"name": 'Create', "args": 'Out<SharedPointer<nn::friends::detail::ipc::IFriendService>, void>'},
  },
  'nn::friends::detail::ipc::IFriendService': {
        0: {"name": 'GetCompletionEvent', "args": 'Out<NativeHandle, void>'},
        1: {"name": 'Cancel', "args": ''},
    10100: {"name": 'GetFriendListIds', "args": 'Out<int, void>, OutArray<nn::account::NetworkServiceAccountId> const&, nn::account::Uid const&, int, nn::friends::detail::ipc::SizedFriendFilter const&, unsigned long'},
    10101: {"name": 'GetFriendList', "args": 'Out<int, void>, OutArray<nn::friends::detail::FriendImpl> const&, nn::account::Uid const&, int, nn::friends::detail::ipc::SizedFriendFilter const&, unsigned long'},
    10102: {"name": 'UpdateFriendInfo', "args": 'OutArray<nn::friends::detail::FriendImpl> const&, nn::account::Uid const&, InArray<nn::account::NetworkServiceAccountId> const&, unsigned long'},
    10110: {"name": 'GetFriendProfileImage', "args": 'Out<int, void>, nn::account::Uid const&, nn::account::NetworkServiceAccountId, OutBuffer const&'},
    10400: {"name": 'GetBlockedUserListIds', "args": 'Out<int, void>, OutArray<nn::account::NetworkServiceAccountId> const&, nn::account::Uid const&, int'},
    10500: {"name": 'GetProfileList', "args": 'OutArray<nn::friends::detail::ProfileImpl> const&, nn::account::Uid const&, InArray<nn::account::NetworkServiceAccountId> const&'},
    10600: {"name": 'DeclareOpenOnlinePlaySession', "args": 'nn::account::Uid const&'},
    10601: {"name": 'DeclareCloseOnlinePlaySession', "args": 'nn::account::Uid const&'},
    10610: {"name": 'UpdateUserPresence', "args": 'nn::account::Uid const&, nn::friends::detail::UserPresenceImpl const&, unsigned long'},
    10700: {"name": 'GetPlayHistoryRegistrationKey', "args": 'Out<nn::friends::PlayHistoryRegistrationKey, void>, nn::account::Uid const&, bool'},
    10701: {"name": 'GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId', "args": 'Out<nn::friends::PlayHistoryRegistrationKey, void>, nn::account::NetworkServiceAccountId, bool'},
    10702: {"name": 'AddPlayHistory', "args": 'nn::account::Uid const&, nn::friends::PlayHistoryRegistrationKey const&, nn::friends::InAppScreenName const&, nn::friends::InAppScreenName const&, unsigned long'},
    11000: {"name": 'GetProfileImageUrl', "args": 'Out<nn::friends::Url, void>, nn::friends::Url const&, int'},
    20100: {"name": 'GetFriendCount', "args": 'Out<int, void>, nn::account::Uid const&, nn::friends::detail::ipc::SizedFriendFilter const&, unsigned long'},
    20101: {"name": 'GetNewlyFriendCount', "args": 'Out<int, void>, nn::account::Uid const&'},
    20102: {"name": 'GetFriendDetailedInfo', "args": 'Out<nn::friends::detail::FriendDetailedInfoImpl, void>, nn::account::Uid const&, nn::account::NetworkServiceAccountId'},
    20103: {"name": 'SyncFriendList', "args": 'nn::account::Uid const&'},
    20110: {"name": 'LoadFriendSetting', "args": 'Out<nn::friends::detail::FriendSettingImpl, void>, nn::account::Uid const&, nn::account::NetworkServiceAccountId'},
    20200: {"name": 'GetReceivedFriendRequestCount', "args": 'Out<int, void>, Out<int, void>, nn::account::Uid const&'},
    20201: {"name": 'GetFriendRequestList', "args": 'Out<int, void>, OutArray<nn::friends::detail::FriendRequestImpl> const&, nn::account::Uid const&, int, int'},
    20300: {"name": 'GetFriendCandidateList', "args": 'Out<int, void>, OutArray<nn::friends::detail::FriendCandidateImpl> const&, nn::account::Uid const&, int'},
    20400: {"name": 'GetBlockedUserList', "args": 'Out<int, void>, OutArray<nn::friends::detail::BlockedUserImpl> const&, nn::account::Uid const&, int'},
    20401: {"name": 'SyncBlockedUserList', "args": 'nn::account::Uid const&'},
    20500: {"name": 'GetProfileExtraList', "args": 'OutArray<nn::friends::detail::ProfileExtraImpl> const&, nn::account::Uid const&, InArray<nn::account::NetworkServiceAccountId> const&'},
    20501: {"name": 'GetRelationship', "args": 'Out<nn::friends::Relationship, void>, nn::account::Uid const&, nn::account::NetworkServiceAccountId'},
    20600: {"name": 'GetUserPresenceView', "args": 'Out<nn::friends::detail::UserPresenceViewImpl, void>, nn::account::Uid const&'},
    20700: {"name": 'GetPlayHistoryList', "args": 'Out<int, void>, OutArray<nn::friends::detail::PlayHistoryImpl> const&, nn::account::Uid const&, int'},
    20701: {"name": 'GetPlayHistoryStatistics', "args": 'Out<nn::friends::PlayHistoryStatistics, void>, nn::account::Uid const&'},
    20800: {"name": 'LoadUserSetting', "args": 'Out<nn::friends::detail::UserSettingImpl, void>, nn::account::Uid const&'},
    20801: {"name": 'SyncUserSetting', "args": 'nn::account::Uid const&'},
    20900: {"name": 'RequestListSummaryOverlayNotification', "args": ''},
    30100: {"name": 'DropFriendNewlyFlags', "args": 'nn::account::Uid const&'},
    30101: {"name": 'DeleteFriend', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId'},
    30110: {"name": 'DropFriendNewlyFlag', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId'},
    30120: {"name": 'ChangeFriendFavoriteFlag', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId, bool'},
    30121: {"name": 'ChangeFriendOnlineNotificationFlag', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId, bool'},
    30200: {"name": 'SendFriendRequest', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId, int'},
    30201: {"name": 'SendFriendRequestWithApplicationInfo', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId, int, nn::friends::ApplicationInfo const&, nn::friends::InAppScreenName const&, nn::friends::InAppScreenName const&'},
    30202: {"name": 'CancelFriendRequest', "args": 'nn::account::Uid const&, nn::friends::RequestId'},
    30203: {"name": 'AcceptFriendRequest', "args": 'nn::account::Uid const&, nn::friends::RequestId'},
    30204: {"name": 'RejectFriendRequest', "args": 'nn::account::Uid const&, nn::friends::RequestId'},
    30205: {"name": 'ReadFriendRequest', "args": 'nn::account::Uid const&, nn::friends::RequestId'},
    30210: {"name": 'GetFacedFriendRequestRegistrationKey', "args": 'Out<nn::friends::FacedFriendRequestRegistrationKey, void>, nn::account::Uid const&'},
    30211: {"name": 'AddFacedFriendRequest', "args": 'nn::account::Uid const&, nn::friends::FacedFriendRequestRegistrationKey const&, nn::account::Nickname const&, InBuffer const&'},
    30212: {"name": 'CancelFacedFriendRequest', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId'},
    30213: {"name": 'GetFacedFriendRequestProfileImage', "args": 'Out<int, void>, nn::account::Uid const&, nn::account::NetworkServiceAccountId, OutBuffer const&'},
    30214: {"name": 'GetFacedFriendRequestProfileImageFromPath', "args": 'Out<int, void>, InArray<char> const&, OutBuffer const&'},
    30400: {"name": 'BlockUser', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId, int'},
    30401: {"name": 'BlockUserWithApplicationInfo', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId, int, nn::friends::ApplicationInfo const&, nn::friends::InAppScreenName const&'},
    30402: {"name": 'UnblockUser', "args": 'nn::account::Uid const&, nn::account::NetworkServiceAccountId'},
    30500: {"name": 'GetProfileExtraFromFriendCode', "args": 'Out<nn::friends::detail::ProfileExtraImpl, void>, nn::account::Uid const&, nn::friends::FriendCode const&'},
    30700: {"name": 'DeletePlayHistory', "args": 'nn::account::Uid const&'},
    30810: {"name": 'ChangePresencePermission', "args": 'nn::account::Uid const&, int'},
    30811: {"name": 'ChangeFriendRequestReception', "args": 'nn::account::Uid const&, bool'},
    30812: {"name": 'ChangePlayLogPermission', "args": 'nn::account::Uid const&, int'},
    30820: {"name": 'IssueFriendCode', "args": 'nn::account::Uid const&'},
    30830: {"name": 'ClearPlayLog', "args": 'nn::account::Uid const&'},
    49900: {"name": 'DeleteNetworkServiceAccountCache', "args": 'nn::account::Uid const&'},
  },
  'nn::tma::IHtcsManager': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
      100: {},
      101: {},
  },
  'nn::tma::ISocket': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
  },
  'nn::tma::IHtcsManager': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
      100: {},
      101: {},
  },
  'nn::tma::ISocket': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
  },
  'nn::lm::ILogService': {
        0: {},
  },
  'nn::lm::ILogger': {
        0: {},
  },
  'nn::nfc::detail::ISystemManager': {
        0: {},
  },
  'nn::nfc::detail::ISystem': {
        0: {},
        1: {},
        2: {},
        3: {},
      100: {},
  },
  'nn::nfc::detail::IUserManager': {
        0: {},
  },
  'nn::nfc::detail::IUser': {
        0: {},
        1: {},
        2: {},
        3: {},
  },
  'nn::nfc::mifare::detail::IUserManager': {
        0: {},
  },
  'nn::nfc::mifare::detail::IUser': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
  },
  'nn::nfp::detail::IDebugManager': {
        0: {},
  },
  'nn::nfp::detail::IDebug': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
       14: {},
       15: {},
       16: {},
       17: {},
       18: {},
       19: {},
       20: {},
       21: {},
       22: {},
      100: {},
      101: {},
      102: {},
      103: {},
      104: {},
      105: {},
      106: {},
      200: {},
      201: {},
      202: {},
      203: {},
      204: {},
      205: {},
  },
  'nn::nfp::detail::ISystemManager': {
        0: {},
  },
  'nn::nfp::detail::ISystem': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
       10: {},
       11: {},
       13: {},
       14: {},
       15: {},
       16: {},
       17: {},
       18: {},
       19: {},
       20: {},
       21: {},
      100: {},
      101: {},
      102: {},
      103: {},
      104: {},
      105: {},
      106: {},
  },
  'nn::nfp::detail::IUserManager': {
        0: {},
  },
  'nn::nfp::detail::IUser': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
       14: {},
       15: {},
       16: {},
       17: {},
       18: {},
       19: {},
       20: {},
       21: {},
       22: {},
  },
  'nn::nifm::detail::IStaticService': {
        4: {"name": 'CreateGeneralService', "args": 'Out<SharedPointer<nn::nifm::detail::IGeneralService>, void>'},
  },
  'nn::nifm::detail::IGeneralService': {
        1: {"name": 'GetClientId', "args": 'Out<nn::nifm::ClientId, void>'},
        2: {"name": 'CreateScanRequest', "args": 'Out<SharedPointer<nn::nifm::detail::IScanRequest>, void>'},
        4: {"name": 'CreateRequest', "args": 'Out<SharedPointer<nn::nifm::detail::IRequest>, void>, int'},
        5: {"name": 'GetCurrentNetworkProfile', "args": 'Out<nn::nifm::detail::sf::NetworkProfileData, void>'},
        6: {"name": 'EnumerateNetworkInterfaces', "args": 'OutArray<nn::nifm::detail::sf::NetworkInterfaceInfo> const&, Out<int, void>, unsigned int'},
        7: {"name": 'EnumerateNetworkProfiles', "args": 'OutArray<nn::nifm::detail::sf::NetworkProfileBasicInfo> const&, Out<int, void>, unsigned char'},
        8: {"name": 'GetNetworkProfile', "args": 'Out<nn::nifm::detail::sf::NetworkProfileData, void>, nn::util::Uuid const&'},
        9: {"name": 'SetNetworkProfile', "args": 'Out<nn::util::Uuid, void>, nn::nifm::detail::sf::NetworkProfileData const&'},
       10: {"name": 'RemoveNetworkProfile', "args": 'nn::util::Uuid const&'},
       11: {"name": 'GetScanData', "args": 'OutArray<nn::nifm::detail::sf::AccessPointData> const&, Out<int, void>'},
       12: {"name": 'GetCurrentIpAddress', "args": 'Out<nn::nifm::IpV4Address, void>'},
       13: {"name": 'GetCurrentAccessPoint', "args": 'Out<nn::nifm::detail::sf::AccessPointData, void>'},
       14: {"name": 'CreateTemporaryNetworkProfile', "args": 'Out<SharedPointer<nn::nifm::detail::INetworkProfile>, void>, Out<nn::util::Uuid, void>, nn::nifm::detail::sf::NetworkProfileData const&'},
       15: {"name": 'GetCurrentIpConfigInfo', "args": 'Out<nn::nifm::IpAddressSetting, void>, Out<nn::nifm::DnsSetting, void>'},
       16: {"name": 'SetWirelessCommunicationEnabled', "args": 'bool'},
       17: {"name": 'IsWirelessCommunicationEnabled', "args": 'Out<bool, void>'},
       18: {"name": 'GetInternetConnectionStatus', "args": 'Out<nn::nifm::detail::sf::InternetConnectionStatus, void>'},
       19: {"name": 'SetEthernetCommunicationEnabled', "args": 'bool'},
       20: {"name": 'IsEthernetCommunicationEnabled', "args": 'Out<bool, void>'},
       21: {"name": 'IsAnyInternetRequestAccepted', "args": 'Out<bool, void>, nn::nifm::ClientId'},
       22: {"name": 'IsAnyForegroundRequestAccepted', "args": 'Out<bool, void>'},
       23: {"name": 'PutToSleep', "args": ''},
       24: {"name": 'WakeUp', "args": ''},
       25: {"name": 'GetSsidListVersion', "args": 'Out<nn::nifm::SsidListVersion, void>'},
       26: {"name": 'SetExclusiveClient', "args": 'nn::nifm::ClientId'},
       27: {"name": 'GetDefaultIpSetting', "args": 'Out<nn::nifm::IpSettingData, void>'},
       28: {"name": 'SetDefaultIpSetting', "args": 'nn::nifm::IpSettingData const&'},
       29: {"name": 'SetWirelessCommunicationEnabledForTest', "args": 'bool'},
       30: {"name": 'SetEthernetCommunicationEnabledForTest', "args": 'bool'},
  },
  'nn::nifm::detail::IScanRequest': {
        0: {"name": 'Submit', "args": ''},
        1: {"name": 'IsProcessing', "args": 'Out<bool, void>'},
        2: {"name": 'GetResult', "args": ''},
        3: {"name": 'GetSystemEventReadableHandle', "args": 'Out<NativeHandle, void>'},
  },
  'nn::nifm::detail::IRequest': {
        0: {"name": 'GetRequestState', "args": 'Out<int, void>'},
        1: {"name": 'GetResult', "args": ''},
        2: {"name": 'GetSystemEventReadableHandles', "args": 'Out<NativeHandle, void>, Out<NativeHandle, void>'},
        3: {"name": 'Cancel', "args": ''},
        4: {"name": 'Submit', "args": ''},
        5: {"name": 'SetRequirement', "args": 'nn::nifm::Requirement const&'},
        6: {"name": 'SetRequirementPreset', "args": 'int'},
        8: {"name": 'SetPriority', "args": 'unsigned char'},
        9: {"name": 'SetNetworkProfileId', "args": 'nn::util::Uuid const&'},
       10: {"name": 'SetRejectable', "args": 'bool'},
       11: {"name": 'SetConnectionConfirmationOption', "args": 'signed char'},
       12: {"name": 'SetPersistent', "args": 'bool'},
       13: {"name": 'SetInstant', "args": 'bool'},
       14: {"name": 'SetSustainable', "args": 'bool, unsigned char'},
       15: {"name": 'SetRawPriority', "args": 'unsigned char'},
       16: {"name": 'SetGreedy', "args": 'bool'},
       17: {"name": 'SetSharable', "args": 'bool'},
       18: {"name": 'SetRequirementByRevision', "args": 'unsigned int'},
       19: {"name": 'GetRequirement', "args": 'Out<nn::nifm::Requirement, void>'},
       20: {"name": 'GetRevision', "args": 'Out<unsigned int, void>'},
       21: {"name": 'GetAppletInfo', "args": 'Out<unsigned int, void>, Out<unsigned int, void>, Out<unsigned int, void>, OutBuffer const&, unsigned int'},
       22: {"name": 'GetHotspotAuthInfo', "args": 'Out<nn::nifm::HotspotAuthInfo, void>, Out<unsigned int, void>'},
  },
  'nn::nifm::detail::INetworkProfile': {
        0: {"name": 'Update', "args": 'Out<nn::util::Uuid, void>, nn::nifm::detail::sf::NetworkProfileData const&'},
  },
  'nn::nsd::detail::IManager': {
       10: {},
       11: {},
       12: {},
       13: {},
       14: {},
       20: {},
       21: {},
       30: {},
       31: {},
       40: {},
       41: {},
       42: {},
       43: {},
       50: {},
       60: {},
       61: {},
       62: {},
  },
  'nn::pcm::IManager': {
        0: {},
        1: {},
  },
  'nn::pctl::detail::ipc::IParentalControlServiceFactory': {
        0: {"name": 'CreateService', "args": 'Out<SharedPointer<nn::pctl::detail::ipc::IParentalControlService>, void>, unsigned long'},
  },
  'nn::pctl::detail::ipc::IParentalControlService': {
     1001: {"name": 'CheckFreeCommunicationPermission', "args": ''},
     1002: {"name": 'ConfirmLaunchApplicationPermission', "args": 'nn::ncm::ApplicationId, InArray<signed char> const&, bool'},
     1003: {"name": 'ConfirmResumeApplicationPermission', "args": 'nn::ncm::ApplicationId, InArray<signed char> const&, bool'},
     1004: {"name": 'ConfirmSnsPostPermission', "args": ''},
     1005: {"name": 'ConfirmSystemSettingsPermission', "args": ''},
     1006: {"name": 'IsRestrictionTemporaryUnlocked', "args": 'Out<bool, void>'},
     1007: {"name": 'RevertRestrictionTemporaryUnlocked', "args": ''},
     1008: {"name": 'EnterRestrictedSystemSettings', "args": ''},
     1009: {"name": 'LeaveRestrictedSystemSettings', "args": ''},
     1010: {"name": 'IsRestrictedSystemSettingsEntered', "args": 'Out<bool, void>'},
     1011: {"name": 'RevertRestrictedSystemSettingsEntered', "args": ''},
     1012: {"name": 'GetRestrictedFeatures', "args": 'Out<int, void>'},
     1031: {"name": 'IsRestrictionEnabled', "args": 'Out<bool, void>'},
     1032: {"name": 'GetSafetyLevel', "args": 'Out<int, void>'},
     1033: {"name": 'SetSafetyLevel', "args": 'int'},
     1034: {"name": 'GetSafetyLevelSettings', "args": 'Out<nn::pctl::SafetyLevelSettings, void>, int'},
     1035: {"name": 'GetCurrentSettings', "args": 'Out<nn::pctl::SafetyLevelSettings, void>'},
     1036: {"name": 'SetCustomSafetyLevelSettings', "args": 'nn::pctl::SafetyLevelSettings'},
     1037: {"name": 'GetDefaultRatingOrganization', "args": 'Out<int, void>'},
     1038: {"name": 'SetDefaultRatingOrganization', "args": 'int'},
     1043: {"name": 'DeleteSettings', "args": ''},
     1039: {"name": 'GetFreeCommunicationApplicationListCount', "args": 'Out<int, void>'},
     1040: {"name": 'GetFreeCommunicationApplicationListOld', "args": 'Out<int, void>, OutArray<nn::pctl::FreeCommunicationApplicationInfo> const&, int'},
     1044: {"name": 'GetFreeCommunicationApplicationList', "args": 'Out<int, void>, OutArray<nn::pctl::FreeCommunicationApplicationInfo> const&, int'},
     1041: {"name": 'UpdateFreeCommunicationApplicationListOld', "args": 'InArray<nn::pctl::FreeCommunicationApplicationInfo> const&'},
     1045: {"name": 'UpdateFreeCommunicationApplicationList', "args": 'InArray<nn::pctl::FreeCommunicationApplicationInfo> const&'},
     1042: {"name": 'AddToFreeCommunicationApplicationList', "args": 'nn::ncm::ApplicationId'},
     1901: {"name": 'DeleteFromFreeCommunicationApplicationListForDebug', "args": 'nn::ncm::ApplicationId'},
     1902: {"name": 'ClearFreeCommunicationApplicationListForDebug', "args": ''},
     1201: {"name": 'UnlockRestrictionTemporarily', "args": 'InArray<char> const&'},
     1202: {"name": 'UnlockSystemSettingsRestriction', "args": 'InArray<char> const&'},
     1203: {"name": 'SetPinCode', "args": 'InArray<char> const&'},
     1204: {"name": 'GenerateInquiryCode', "args": 'Out<nn::pctl::InquiryCode, void>'},
     1205: {"name": 'CheckMasterKey', "args": 'Out<bool, void>, nn::pctl::InquiryCode const&, InArray<char> const&'},
     1206: {"name": 'GetPinCodeLength', "args": 'Out<int, void>'},
     1401: {"name": 'RequestPairing', "args": 'Out<nn::pctl::detail::PairingInfoBase, void>, InArray<char> const&'},
     1402: {"name": 'AuthorizePairing', "args": 'Out<nn::pctl::detail::PairingInfoBase, void>, nn::pctl::detail::PairingInfoBase const&'},
     1403: {"name": 'IsPairingActive', "args": 'Out<bool, void>'},
     1404: {"name": 'RetrievePairingInfo', "args": 'Out<nn::pctl::detail::PairingInfoBase, void>'},
     1405: {"name": 'UnlinkPairing', "args": 'bool'},
     1941: {"name": 'DeletePairing', "args": ''},
     1411: {"name": 'GetPairingAccountInfo', "args": 'Out<nn::pctl::detail::PairingAccountInfoBase, void>, nn::pctl::detail::PairingInfoBase const&'},
     1421: {"name": 'GetAccountNickname', "args": 'Out<unsigned int, void>, OutArray<char> const&, nn::pctl::detail::PairingAccountInfoBase const&'},
     1422: {"name": 'GetAccountMiiImage', "args": 'Out<unsigned int, void>, OutBuffer const&, nn::pctl::detail::PairingAccountInfoBase const&'},
     1423: {"name": 'GetAccountMiiImageContentType', "args": 'Out<unsigned int, void>, OutArray<char> const&, nn::pctl::detail::PairingAccountInfoBase const&'},
     1424: {"name": 'GetAccountState', "args": 'Out<int, void>, nn::pctl::detail::PairingAccountInfoBase const&'},
     1431: {"name": 'SynchronizeParentalControlSettings', "args": ''},
     1432: {"name": 'GetSynchronizationEvent', "args": 'Out<NativeHandle, void>'},
     1451: {"name": 'StartPlayTimer', "args": ''},
     1452: {"name": 'StopPlayTimer', "args": ''},
     1453: {"name": 'IsPlayTimerEnabled', "args": 'Out<bool, void>'},
     1454: {"name": 'GetPlayTimerRemainingTime', "args": 'Out<nn::TimeSpanType, void>'},
     1455: {"name": 'IsRestrictedByPlayTimer', "args": 'Out<bool, void>'},
     1456: {"name": 'GetPlayTimerSettings', "args": 'Out<nn::pctl::PlayTimerSettings, void>'},
     1457: {"name": 'GetPlayTimerEventToRequestSuspension', "args": 'Out<NativeHandle, void>'},
     1951: {"name": 'SetPlayTimerSettingsForDebug', "args": 'nn::pctl::PlayTimerSettings const&'},
     1471: {"name": 'NotifyWrongPinCodeInputManyTimes', "args": ''},
     1472: {"name": 'CancelNetworkRequest', "args": ''},
     1601: {"name": 'DisableAllFeatures', "args": 'Out<bool, void>'},
     1602: {"name": 'PostEnableAllFeatures', "args": 'Out<bool, void>'},
     1603: {"name": 'IsAllFeaturesDisabled', "args": 'Out<bool, void>, Out<bool, void>'},
     2001: {"name": 'RequestPairingAsync', "args": 'Out<nn::pctl::detail::AsyncData, void>, Out<NativeHandle, void>, InArray<char> const&'},
     2002: {"name": 'FinishRequestPairing', "args": 'Out<nn::pctl::detail::PairingInfoBase, void>, nn::pctl::detail::AsyncData'},
     2003: {"name": 'AuthorizePairingAsync', "args": 'Out<nn::pctl::detail::AsyncData, void>, Out<NativeHandle, void>, nn::pctl::detail::PairingInfoBase const&'},
     2004: {"name": 'FinishAuthorizePairing', "args": 'Out<nn::pctl::detail::PairingInfoBase, void>, nn::pctl::detail::AsyncData'},
     2005: {"name": 'RetrievePairingInfoAsync', "args": 'Out<nn::pctl::detail::AsyncData, void>, Out<NativeHandle, void>'},
     2006: {"name": 'FinishRetrievePairingInfo', "args": 'Out<nn::pctl::detail::PairingInfoBase, void>, nn::pctl::detail::AsyncData'},
     2007: {"name": 'UnlinkPairingAsync', "args": 'Out<nn::pctl::detail::AsyncData, void>, Out<NativeHandle, void>, bool'},
     2008: {"name": 'FinishUnlinkPairing', "args": 'nn::pctl::detail::AsyncData, bool'},
     2009: {"name": 'GetAccountMiiImageAsync', "args": 'Out<nn::pctl::detail::AsyncData, void>, Out<NativeHandle, void>, Out<unsigned int, void>, OutBuffer const&, nn::pctl::detail::PairingAccountInfoBase const&'},
     2010: {"name": 'FinishGetAccountMiiImage', "args": 'Out<unsigned int, void>, OutBuffer const&, nn::pctl::detail::AsyncData'},
     2011: {"name": 'GetAccountMiiImageContentTypeAsync', "args": 'Out<nn::pctl::detail::AsyncData, void>, Out<NativeHandle, void>, Out<unsigned int, void>, OutArray<char> const&, nn::pctl::detail::PairingAccountInfoBase const&'},
     2012: {"name": 'FinishGetAccountMiiImageContentType', "args": 'Out<unsigned int, void>, OutArray<char> const&, nn::pctl::detail::AsyncData'},
     2013: {"name": 'SynchronizeParentalControlSettingsAsync', "args": 'Out<nn::pctl::detail::AsyncData, void>, Out<NativeHandle, void>'},
     2014: {"name": 'FinishSynchronizeParentalControlSettings', "args": 'nn::pctl::detail::AsyncData'},
  },
  'nn::settings::IFactorySettingsServer': {
        0: {"name": 'GetBluetoothBdAddress', "args": 'Out<nn::settings::factory::BdAddress, void>'},
        1: {"name": 'GetConfigurationId1', "args": 'Out<nn::settings::factory::ConfigurationId1, void>'},
        2: {"name": 'GetAccelerometerOffset', "args": 'Out<nn::settings::factory::AccelerometerOffset, void>'},
        3: {"name": 'GetAccelerometerScale', "args": 'Out<nn::settings::factory::AccelerometerScale, void>'},
        4: {"name": 'GetGyroscopeOffset', "args": 'Out<nn::settings::factory::GyroscopeOffset, void>'},
        5: {"name": 'GetGyroscopeScale', "args": 'Out<nn::settings::factory::GyroscopeScale, void>'},
        6: {"name": 'GetWirelessLanMacAddress', "args": 'Out<nn::settings::factory::MacAddress, void>'},
        7: {"name": 'GetWirelessLanCountryCodeCount', "args": 'Out<int, void>'},
        8: {"name": 'GetWirelessLanCountryCodes', "args": 'Out<int, void>, OutArray<nn::settings::factory::CountryCode> const&'},
        9: {"name": 'GetSerialNumber', "args": 'Out<nn::settings::factory::SerialNumber, void>'},
       10: {"name": 'SetInitialSystemAppletProgramId', "args": 'nn::ncm::ProgramId'},
       11: {"name": 'SetOverlayDispProgramId', "args": 'nn::ncm::ProgramId'},
       12: {"name": 'GetBatteryLot', "args": 'Out<nn::settings::factory::BatteryLot, void>'},
       14: {"name": 'GetEciDeviceCertificate', "args": 'Out<nn::settings::factory::EccB233DeviceCertificate, void>'},
       15: {"name": 'GetEticketDeviceCertificate', "args": 'Out<nn::settings::factory::Rsa2048DeviceCertificate, void>'},
       16: {"name": 'GetSslKey', "args": 'Out<nn::settings::factory::SslKey, void>'},
       17: {"name": 'GetSslCertificate', "args": 'Out<nn::settings::factory::SslCertificate, void>'},
       18: {"name": 'GetGameCardKey', "args": 'Out<nn::settings::factory::GameCardKey, void>'},
       19: {"name": 'GetGameCardCertificate', "args": 'Out<nn::settings::factory::GameCardCertificate, void>'},
       20: {"name": 'GetEciDeviceKey', "args": 'Out<nn::settings::factory::EccB233DeviceKey, void>'},
       21: {"name": 'GetEticketDeviceKey', "args": 'Out<nn::settings::factory::Rsa2048DeviceKey, void>'},
       22: {"name": 'GetSpeakerParameter', "args": 'Out<nn::settings::factory::SpeakerParameter, void>'},
  },
  'nn::settings::IFirmwareDebugSettingsServer': {
        2: {"name": 'SetSettingsItemValue', "args": 'nn::settings::SettingsName const&, nn::settings::SettingsItemKey const&, InBuffer const&'},
        3: {"name": 'ResetSettingsItemValue', "args": 'nn::settings::SettingsName const&, nn::settings::SettingsItemKey const&'},
        4: {"name": 'CreateSettingsItemKeyIterator', "args": 'Out<SharedPointer<nn::settings::ISettingsItemKeyIterator>, void>, nn::settings::SettingsName const&'},
  },
  'nn::settings::ISettingsItemKeyIterator': {
        0: {"name": 'GoNext', "args": ''},
        1: {"name": 'GetKeySize', "args": 'Out<unsigned long, void>'},
        2: {"name": 'GetKey', "args": 'Out<unsigned long, void>, OutBuffer const&'},
  },
  'nn::settings::ISettingsServer': {
        0: {"name": 'GetLanguageCode', "args": 'Out<nn::settings::LanguageCode, void>'},
        1: {"name": 'GetAvailableLanguageCodes', "args": 'Out<int, void>, OutArray<nn::settings::LanguageCode> const&'},
        3: {"name": 'GetAvailableLanguageCodeCount', "args": 'Out<int, void>'},
        4: {"name": 'GetRegionCode', "args": 'Out<int, void>'},
  },
  'nn::settings::ISystemSettingsServer': {
        0: {"name": 'SetLanguageCode', "args": 'nn::settings::LanguageCode'},
        1: {"name": 'SetNetworkSettings', "args": 'InArray<nn::settings::system::NetworkSettings> const&'},
        2: {"name": 'GetNetworkSettings', "args": 'Out<int, void>, OutArray<nn::settings::system::NetworkSettings> const&'},
        3: {"name": 'GetFirmwareVersion', "args": 'Out<nn::settings::system::FirmwareVersion, void>'},
        7: {"name": 'GetLockScreenFlag', "args": 'Out<bool, void>'},
        8: {"name": 'SetLockScreenFlag', "args": 'bool'},
        9: {"name": 'GetBacklightSettings', "args": 'Out<nn::settings::system::BacklightSettings, void>'},
       10: {"name": 'SetBacklightSettings', "args": 'nn::settings::system::BacklightSettings const&'},
       11: {"name": 'SetBluetoothDevicesSettings', "args": 'InArray<nn::settings::system::BluetoothDevicesSettings> const&'},
       12: {"name": 'GetBluetoothDevicesSettings', "args": 'Out<int, void>, OutArray<nn::settings::system::BluetoothDevicesSettings> const&'},
       13: {"name": 'GetExternalSteadyClockSourceId', "args": 'Out<nn::util::Uuid, void>'},
       14: {"name": 'SetExternalSteadyClockSourceId', "args": 'nn::util::Uuid const&'},
       15: {"name": 'GetUserSystemClockContext', "args": 'Out<nn::settings::system::SystemClockContext, void>'},
       16: {"name": 'SetUserSystemClockContext', "args": 'nn::settings::system::SystemClockContext const&'},
       17: {"name": 'GetAccountSettings', "args": 'Out<nn::settings::system::AccountSettings, void>'},
       18: {"name": 'SetAccountSettings', "args": 'nn::settings::system::AccountSettings'},
       19: {"name": 'GetAudioVolume', "args": 'Out<nn::settings::system::AudioVolume, void>, int'},
       20: {"name": 'SetAudioVolume', "args": 'nn::settings::system::AudioVolume, int'},
       21: {"name": 'GetEulaVersions', "args": 'Out<int, void>, OutArray<nn::settings::system::EulaVersion> const&'},
       22: {"name": 'SetEulaVersions', "args": 'InArray<nn::settings::system::EulaVersion> const&'},
       23: {"name": 'GetColorSetId', "args": 'Out<int, void>'},
       24: {"name": 'SetColorSetId', "args": 'int'},
       25: {"name": 'GetConsoleInformationUploadFlag', "args": 'Out<bool, void>'},
       26: {"name": 'SetConsoleInformationUploadFlag', "args": 'bool'},
       27: {"name": 'GetAutomaticApplicationDownloadFlag', "args": 'Out<bool, void>'},
       28: {"name": 'SetAutomaticApplicationDownloadFlag', "args": 'bool'},
       29: {"name": 'GetNotificationSettings', "args": 'Out<nn::settings::system::NotificationSettings, void>'},
       30: {"name": 'SetNotificationSettings', "args": 'nn::settings::system::NotificationSettings const&'},
       31: {"name": 'GetAccountNotificationSettings', "args": 'Out<int, void>, OutArray<nn::settings::system::AccountNotificationSettings> const&'},
       32: {"name": 'SetAccountNotificationSettings', "args": 'InArray<nn::settings::system::AccountNotificationSettings> const&'},
       35: {"name": 'GetVibrationMasterVolume', "args": 'Out<float, void>'},
       36: {"name": 'SetVibrationMasterVolume', "args": 'float'},
       37: {"name": 'GetSettingsItemValueSize', "args": 'Out<unsigned long, void>, nn::settings::SettingsName const&, nn::settings::SettingsItemKey const&'},
       38: {"name": 'GetSettingsItemValue', "args": 'Out<unsigned long, void>, OutBuffer const&, nn::settings::SettingsName const&, nn::settings::SettingsItemKey const&'},
       39: {"name": 'GetTvSettings', "args": 'Out<nn::settings::system::TvSettings, void>'},
       40: {"name": 'SetTvSettings', "args": 'nn::settings::system::TvSettings const&'},
       41: {"name": 'GetEdid', "args": 'Out<nn::settings::system::Edid, void>'},
       42: {"name": 'SetEdid', "args": 'nn::settings::system::Edid const&'},
       43: {"name": 'GetAudioOutputMode', "args": 'Out<int, void>, int'},
       44: {"name": 'SetAudioOutputMode', "args": 'int, int'},
       45: {"name": 'IsForceMuteOnHeadphoneRemoved', "args": 'Out<bool, void>'},
       46: {"name": 'SetForceMuteOnHeadphoneRemoved', "args": 'bool'},
       47: {"name": 'GetQuestFlag', "args": 'Out<bool, void>'},
       48: {"name": 'SetQuestFlag', "args": 'bool'},
       49: {"name": 'GetDataDeletionSettings', "args": 'Out<nn::settings::system::DataDeletionSettings, void>'},
       50: {"name": 'SetDataDeletionSettings', "args": 'nn::settings::system::DataDeletionSettings'},
       51: {"name": 'GetInitialSystemAppletProgramId', "args": 'Out<nn::ncm::ProgramId, void>'},
       52: {"name": 'GetOverlayDispProgramId', "args": 'Out<nn::ncm::ProgramId, void>'},
       53: {"name": 'GetDeviceTimeZoneLocationName', "args": 'Out<nn::time::LocationName, void>'},
       54: {"name": 'SetDeviceTimeZoneLocationName', "args": 'nn::time::LocationName const&'},
       55: {"name": 'GetWirelessCertificationFileSize', "args": 'Out<unsigned long, void>'},
       56: {"name": 'GetWirelessCertificationFile', "args": 'Out<unsigned long, void>, OutBuffer const&'},
       57: {"name": 'SetRegionCode', "args": 'int'},
       58: {"name": 'GetNetworkSystemClockContext', "args": 'Out<nn::settings::system::SystemClockContext, void>'},
       59: {"name": 'SetNetworkSystemClockContext', "args": 'nn::settings::system::SystemClockContext const&'},
       60: {"name": 'IsUserSystemClockAutomaticCorrectionEnabled', "args": 'Out<bool, void>'},
       61: {"name": 'SetUserSystemClockAutomaticCorrectionEnabled', "args": 'bool'},
       62: {"name": 'GetDebugModeFlag', "args": 'Out<bool, void>'},
       63: {"name": 'GetPrimaryAlbumStorage', "args": 'Out<int, void>'},
       64: {"name": 'SetPrimaryAlbumStorage', "args": 'int'},
       65: {"name": 'GetUsb30EnableFlag', "args": 'Out<bool, void>'},
       66: {"name": 'SetUsb30EnableFlag', "args": 'bool'},
       67: {"name": 'GetBatteryLot', "args": 'Out<nn::settings::system::BatteryLot, void>'},
       68: {"name": 'GetSerialNumber', "args": 'Out<nn::settings::system::SerialNumber, void>'},
       69: {"name": 'GetNfcEnableFlag', "args": 'Out<bool, void>'},
       70: {"name": 'SetNfcEnableFlag', "args": 'bool'},
       71: {"name": 'GetSleepSettings', "args": 'Out<nn::settings::system::SleepSettings, void>'},
       72: {"name": 'SetSleepSettings', "args": 'nn::settings::system::SleepSettings const&'},
       73: {"name": 'GetWirelessLanEnableFlag', "args": 'Out<bool, void>'},
       74: {"name": 'SetWirelessLanEnableFlag', "args": 'bool'},
       75: {"name": 'GetInitialLaunchSettings', "args": 'Out<nn::settings::system::InitialLaunchSettings, void>'},
       76: {"name": 'SetInitialLaunchSettings', "args": 'nn::settings::system::InitialLaunchSettings const&'},
       77: {"name": 'GetDeviceNickName', "args": 'Out<nn::settings::system::DeviceNickName, void>'},
       78: {"name": 'SetDeviceNickName', "args": 'nn::settings::system::DeviceNickName const&'},
       79: {"name": 'GetProductModel', "args": 'Out<int, void>'},
       80: {"name": 'GetLdnChannel', "args": 'Out<int, void>'},
       81: {"name": 'SetLdnChannel', "args": 'int'},
       82: {"name": 'AcquireTelemetryDirtyFlagEventHandle', "args": 'Out<NativeHandle, void>'},
       83: {"name": 'GetTelemetryDirtyFlags', "args": 'Out<nn::util::BitFlagSet<128, nn::settings::system::TelemetryDirtyFlag>, void>'},
       84: {"name": 'GetPtmBatteryLot', "args": 'Out<nn::settings::factory::BatteryLot, void>'},
       85: {"name": 'SetPtmBatteryLot', "args": 'nn::settings::factory::BatteryLot const&'},
       86: {"name": 'GetPtmFuelGaugeParameter', "args": 'Out<nn::settings::system::PtmFuelGaugeParameter, void>'},
       87: {"name": 'SetPtmFuelGaugeParameter', "args": 'nn::settings::system::PtmFuelGaugeParameter const&'},
       88: {"name": 'GetBluetoothEnableFlag', "args": 'Out<bool, void>'},
       89: {"name": 'SetBluetoothEnableFlag', "args": 'bool'},
       90: {"name": 'GetMiiAuthorId', "args": 'Out<nn::util::Uuid, void>'},
       91: {"name": 'SetShutdownRtcValue', "args": 'long'},
       92: {"name": 'GetShutdownRtcValue', "args": 'Out<long, void>'},
       93: {"name": 'AcquireFatalDirtyFlagEventHandle', "args": 'Out<NativeHandle, void>'},
       94: {"name": 'GetFatalDirtyFlags', "args": 'Out<nn::util::BitFlagSet<128, nn::settings::system::FatalDirtyFlag>, void>'},
  },
  'nn::ssl::sf::ISslService': {
        0: {"name": 'CreateContext', "args": 'Out<SharedPointer<nn::ssl::sf::ISslContext>, void>, nn::ssl::sf::SslVersion, unsigned long'},
        1: {"name": 'GetContextCount', "args": 'Out<unsigned int, void>'},
  },
  'nn::ssl::sf::ISslContext': {
        0: {"name": 'SetOption', "args": 'nn::ssl::sf::ContextOption, int'},
        1: {"name": 'GetOption', "args": 'Out<int, void>, nn::ssl::sf::ContextOption'},
        2: {"name": 'CreateConnection', "args": 'Out<SharedPointer<nn::ssl::sf::ISslConnection>, void>'},
        3: {"name": 'GetConnectionCount', "args": 'Out<unsigned int, void>'},
        4: {"name": 'ImportServerPki', "args": 'Out<unsigned long, void>, InBuffer const&, nn::ssl::sf::CertificateFormat'},
        5: {"name": 'ImportClientPki', "args": 'Out<unsigned long, void>, InBuffer const&, InBuffer const&'},
        6: {"name": 'RemoveServerPki', "args": 'unsigned long'},
        7: {"name": 'RemoveClientPki', "args": 'unsigned long'},
        8: {"name": 'RegisterInternalPki', "args": 'Out<unsigned long, void>, nn::ssl::sf::InternalPki'},
  },
  'nn::ssl::sf::ISslConnection': {
        0: {"name": 'SetSocketDescriptor', "args": 'int, Out<int, void>'},
        1: {"name": 'SetHostName', "args": 'InBuffer const&'},
        2: {"name": 'SetVerifyOption', "args": 'nn::ssl::sf::VerifyOption'},
        3: {"name": 'SetIoMode', "args": 'nn::ssl::sf::IoMode'},
        4: {"name": 'GetSocketDescriptor', "args": 'Out<int, void>'},
        5: {"name": 'GetHostName', "args": 'OutBuffer const&, Out<unsigned int, void>'},
        6: {"name": 'GetVerifyOption', "args": 'Out<nn::ssl::sf::VerifyOption, void>'},
        7: {"name": 'GetIoMode', "args": 'Out<nn::ssl::sf::IoMode, void>'},
        8: {"name": 'DoHandshake', "args": ''},
        9: {"name": 'DoHandshakeGetServerCert', "args": 'Out<unsigned int, void>, Out<unsigned int, void>, OutBuffer const&'},
       10: {"name": 'Read', "args": 'Out<unsigned int, void>, OutBuffer const&'},
       11: {"name": 'Write', "args": 'Out<unsigned int, void>, InBuffer const&'},
       12: {"name": 'Pending', "args": 'Out<int, void>'},
       13: {"name": 'Peek', "args": 'Out<unsigned int, void>, OutBuffer const&'},
       14: {"name": 'Poll', "args": 'Out<nn::ssl::sf::PollEvent, void>, nn::ssl::sf::PollEvent, unsigned int'},
       15: {"name": 'GetVerifyCertError', "args": ''},
       16: {"name": 'GetNeededServerCertBufferSize', "args": 'Out<unsigned int, void>'},
       17: {"name": 'SetSessionCacheMode', "args": 'nn::ssl::sf::SessionCacheMode'},
       18: {"name": 'GetSessionCacheMode', "args": 'Out<nn::ssl::sf::SessionCacheMode, void>'},
       19: {"name": 'FlushSessionCache', "args": ''},
       20: {"name": 'SetRenegotiationMode', "args": 'nn::ssl::sf::RenegotiationMode'},
       21: {"name": 'GetRenegotiationMode', "args": 'Out<nn::ssl::sf::RenegotiationMode, void>'},
  },
  'nn::timesrv::detail::service::IStaticService': {
        0: {"name": 'GetStandardUserSystemClock', "args": 'Out<SharedPointer<nn::timesrv::detail::service::ISystemClock>, void>'},
        1: {"name": 'GetStandardNetworkSystemClock', "args": 'Out<SharedPointer<nn::timesrv::detail::service::ISystemClock>, void>'},
        2: {"name": 'GetStandardSteadyClock', "args": 'Out<SharedPointer<nn::timesrv::detail::service::ISteadyClock>, void>'},
        3: {"name": 'GetTimeZoneService', "args": 'Out<SharedPointer<nn::timesrv::detail::service::ITimeZoneService>, void>'},
        4: {"name": 'GetStandardLocalSystemClock', "args": 'Out<SharedPointer<nn::timesrv::detail::service::ISystemClock>, void>'},
      100: {"name": 'IsStandardUserSystemClockAutomaticCorrectionEnabled', "args": 'Out<bool, void>'},
      101: {"name": 'SetStandardUserSystemClockAutomaticCorrectionEnabled', "args": 'bool'},
  },
  'nn::timesrv::detail::service::ISystemClock': {
        0: {"name": 'GetCurrentTime', "args": 'Out<nn::time::PosixTime, void>'},
        1: {"name": 'SetCurrentTime', "args": 'nn::time::PosixTime'},
        2: {"name": 'GetSystemClockContext', "args": 'Out<nn::time::SystemClockContext, void>'},
        3: {"name": 'SetSystemClockContext', "args": 'nn::time::SystemClockContext const&'},
  },
  'nn::timesrv::detail::service::ISteadyClock': {
        0: {"name": 'GetCurrentTimePoint', "args": 'Out<nn::time::SteadyClockTimePoint, void>'},
        2: {"name": 'GetTestOffset', "args": 'Out<nn::TimeSpanType, void>'},
        3: {"name": 'SetTestOffset', "args": 'nn::TimeSpanType'},
  },
  'nn::timesrv::detail::service::ITimeZoneService': {
        0: {"name": 'GetDeviceLocationName', "args": 'Out<nn::time::LocationName, void>'},
        1: {"name": 'SetDeviceLocationName', "args": 'nn::time::LocationName const&'},
        2: {"name": 'GetTotalLocationNameCount', "args": 'Out<int, void>'},
        3: {"name": 'LoadLocationNameList', "args": 'Out<int, void>, OutArray<nn::time::LocationName> const&, int'},
        4: {"name": 'LoadTimeZoneRule', "args": 'Out<nn::time::TimeZoneRule, void>, nn::time::LocationName const&'},
      100: {"name": 'ToCalendarTime', "args": 'Out<nn::time::CalendarTime, void>, Out<nn::time::sf::CalendarAdditionalInfo, void>, nn::time::PosixTime, nn::time::TimeZoneRule const&'},
      101: {"name": 'ToCalendarTimeWithMyRule', "args": 'Out<nn::time::CalendarTime, void>, Out<nn::time::sf::CalendarAdditionalInfo, void>, nn::time::PosixTime'},
      201: {"name": 'ToPosixTime', "args": 'Out<int, void>, OutArray<nn::time::PosixTime> const&, nn::time::CalendarTime, nn::time::TimeZoneRule const&'},
      202: {"name": 'ToPosixTimeWithMyRule', "args": 'Out<int, void>, OutArray<nn::time::PosixTime> const&, nn::time::CalendarTime'},
  },
  'nn::ntc::detail::service::IStaticService': {
        0: {},
  },
  'nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
  },
  'nn::aocsrv::detail::IAddOnContentManager': {
        0: {"name": 'CountAddOnContentByApplicationId', "args": 'Out<int, void>, nn::ncm::ApplicationId'},
        1: {"name": 'ListAddOnContentByApplicationId', "args": 'Out<int, void>, OutArray<int> const&, int, int, nn::ncm::ApplicationId'},
        2: {"name": 'CountAddOnContent', "args": 'Out<int, void>, unsigned long'},
        3: {"name": 'ListAddOnContent', "args": 'Out<int, void>, OutArray<int> const&, unsigned long, int, int'},
        4: {"name": 'GetAddOnContentBaseIdByApplicationId', "args": 'Out<unsigned long, void>, nn::ncm::ApplicationId'},
        5: {"name": 'GetAddOnContentBaseId', "args": 'Out<unsigned long, void>, unsigned long'},
  },
  'nn::audio::detail::IAudioDebugManager': {
        0: {},
        1: {},
        2: {},
        3: {},
  },
  'nn::audio::detail::IAudioInManager': {
        0: {},
        1: {},
  },
  'nn::audio::detail::IAudioIn': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
  },
  'nn::audio::detail::IAudioInManagerForApplet': {
        0: {},
        1: {},
        2: {},
        3: {},
  },
  'nn::audio::detail::IAudioInManagerForDebugger': {
        0: {},
        1: {},
  },
  'nn::audio::detail::IAudioOutManager': {
        0: {},
        1: {},
  },
  'nn::audio::detail::IAudioOut': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
  },
  'nn::audio::detail::IAudioOutManagerForApplet': {
        0: {},
        1: {},
        2: {},
        3: {},
  },
  'nn::audio::detail::IAudioOutManagerForDebugger': {
        0: {},
        1: {},
  },
  'nn::audio::detail::IAudioRendererManager': {
        0: {},
        1: {},
        2: {},
  },
  'nn::audio::detail::IAudioRenderer': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
  },
  'nn::audio::detail::IAudioDevice': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
  },
  'nn::audio::detail::IAudioRendererManagerForApplet': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
  },
  'nn::audio::detail::IAudioRendererManagerForDebugger': {
        0: {},
        1: {},
  },
  'nn::audio::detail::ICodecController': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
  },
  'nn::audio::detail::IFinalOutputRecorderManager': {
        0: {},
  },
  'nn::audio::detail::IFinalOutputRecorder': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
  },
  'nn::audio::detail::IFinalOutputRecorderManagerForDebugger': {
        0: {},
        1: {},
  },
  'nn::audio::detail::IFinalOutputRecorderManagerForApplet': {
        0: {},
        1: {},
  },
  'nn::mii::detail::IStaticService': {
        0: {"name": 'GetDatabaseService', "args": 'Out<SharedPointer<nn::mii::detail::IDatabaseService>, void>, int'},
  },
  'nn::mii::detail::IDatabaseService': {
        0: {"name": 'IsUpdated', "args": 'Out<bool, void>, int'},
        1: {"name": 'IsFullDatabase', "args": 'Out<bool, void>'},
        2: {"name": 'GetCount', "args": 'Out<int, void>, int'},
        3: {"name": 'Get', "args": 'Out<int, void>, OutArray<nn::mii::CharInfoElement> const&, int'},
        4: {"name": 'Get1', "args": 'Out<int, void>, OutArray<nn::mii::CharInfo> const&, int'},
        5: {"name": 'UpdateLatest', "args": 'Out<nn::mii::CharInfo, void>, nn::mii::CharInfo const&, int'},
        6: {"name": 'BuildRandom', "args": 'Out<nn::mii::CharInfo, void>, int, int, int'},
        7: {"name": 'BuildDefault', "args": 'Out<nn::mii::CharInfo, void>, int'},
        8: {"name": 'Get2', "args": 'Out<int, void>, OutArray<nn::mii::StoreDataElement> const&, int'},
        9: {"name": 'Get3', "args": 'Out<int, void>, OutArray<nn::mii::StoreData> const&, int'},
       10: {"name": 'UpdateLatest1', "args": 'Out<nn::mii::StoreData, void>, nn::mii::StoreData const&, int'},
       11: {"name": 'FindIndex', "args": 'Out<int, void>, nn::mii::CreateId const&, bool'},
       12: {"name": 'Move', "args": 'int, nn::mii::CreateId const&'},
       13: {"name": 'AddOrReplace', "args": 'nn::mii::StoreData const&'},
       14: {"name": 'Delete', "args": 'nn::mii::CreateId const&'},
       15: {"name": 'DestroyFile', "args": ''},
       16: {"name": 'DeleteFile', "args": ''},
       17: {"name": 'Format', "args": ''},
       18: {"name": 'Import', "args": 'InBuffer const&'},
       19: {"name": 'Export', "args": 'OutBuffer const&'},
       20: {"name": 'IsBrokenDatabaseWithClearFlag', "args": 'Out<bool, void>'},
       21: {"name": 'GetIndex', "args": 'Out<int, void>, nn::mii::CharInfo const&'},
  },
  'nn::pl::detail::ISharedFontManager': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
  },
  'nn::hid::IHidDebugServer': {
        0: {"name": 'DeactivateDebugPad', "args": ''},
        1: {"name": 'SetDebugPadAutoPilotState', "args": 'nn::hid::debug::DebugPadAutoPilotState const&'},
        2: {"name": 'UnsetDebugPadAutoPilotState', "args": ''},
       10: {"name": 'DeactivateTouchScreen', "args": ''},
       11: {"name": 'SetTouchScreenAutoPilotState', "args": 'InArray<nn::hid::TouchState> const&'},
       12: {"name": 'UnsetTouchScreenAutoPilotState', "args": ''},
       20: {"name": 'DeactivateMouse', "args": ''},
       21: {"name": 'SetMouseAutoPilotState', "args": 'nn::hid::debug::MouseAutoPilotState const&'},
       22: {"name": 'UnsetMouseAutoPilotState', "args": ''},
       30: {"name": 'DeactivateKeyboard', "args": ''},
       31: {"name": 'SetKeyboardAutoPilotState', "args": 'nn::hid::debug::KeyboardAutoPilotState const&'},
       32: {"name": 'UnsetKeyboardAutoPilotState', "args": ''},
       50: {"name": 'DeactivateXpad', "args": 'nn::hid::BasicXpadId'},
       51: {"name": 'SetXpadAutoPilotState', "args": 'nn::hid::BasicXpadId, nn::hid::debug::BasicXpadAutoPilotState const&'},
       52: {"name": 'UnsetXpadAutoPilotState', "args": 'nn::hid::BasicXpadId'},
       60: {"name": 'DeactivateJoyXpad', "args": 'nn::hid::JoyXpadId'},
      110: {"name": 'DeactivateHomeButton', "args": ''},
      111: {"name": 'SetHomeButtonAutoPilotState', "args": 'nn::hid::debug::HomeButtonAutoPilotState'},
      112: {"name": 'UnsetHomeButtonAutoPilotState', "args": ''},
      120: {"name": 'DeactivateSleepButton', "args": ''},
      121: {"name": 'SetSleepButtonAutoPilotState', "args": 'nn::hid::debug::SleepButtonAutoPilotState'},
      122: {"name": 'UnsetSleepButtonAutoPilotState', "args": ''},
      123: {"name": 'DeactivateInputDetector', "args": ''},
      130: {"name": 'DeactivateCaptureButton', "args": ''},
      131: {"name": 'SetCaptureButtonAutoPilotState', "args": 'nn::hid::debug::CaptureButtonAutoPilotState'},
      132: {"name": 'UnsetCaptureButtonAutoPilotState', "args": ''},
      201: {"name": 'ActivateFirmwareUpdate', "args": ''},
      202: {"name": 'DeactivateFirmwareUpdate', "args": ''},
      203: {"name": 'StartFirmwareUpdate', "args": 'Out<NativeHandle, void>, unsigned int, nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType>'},
      204: {"name": 'GetFirmwareUpdateStage', "args": 'Out<long, void>, Out<long, void>'},
      205: {"name": 'GetFirmwareVersion', "args": 'Out<nn::hid::debug::FirmwareVersion, void>, unsigned int, nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType>'},
      206: {"name": 'GetDestinationFirmwareVersion', "args": 'Out<nn::hid::debug::FirmwareVersion, void>, unsigned int, nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType>'},
  },
  'nn::hid::IHidServer': {
        0: {"name": 'CreateAppletResource', "args": 'Out<SharedPointer<nn::hid::IAppletResource>, void>, nn::applet::AppletResourceUserId'},
        1: {"name": 'ActivateDebugPad', "args": 'nn::applet::AppletResourceUserId'},
       11: {"name": 'ActivateTouchScreen', "args": 'nn::applet::AppletResourceUserId'},
       21: {"name": 'ActivateMouse', "args": 'nn::applet::AppletResourceUserId'},
       31: {"name": 'ActivateKeyboard', "args": 'nn::applet::AppletResourceUserId'},
       40: {"name": 'AcquireXpadIdEventHandle', "args": 'Out<NativeHandle, void>, unsigned long'},
       41: {"name": 'ReleaseXpadIdEventHandle', "args": 'unsigned long'},
       51: {"name": 'ActivateXpad', "args": 'nn::applet::AppletResourceUserId, nn::hid::BasicXpadId'},
       55: {"name": 'GetXpadIds', "args": 'Out<long, void>, OutArray<nn::hid::BasicXpadId> const&'},
       56: {"name": 'ActivateJoyXpad', "args": 'nn::hid::JoyXpadId'},
       58: {"name": 'GetJoyXpadLifoHandle', "args": 'Out<NativeHandle, void>, nn::hid::JoyXpadId'},
       59: {"name": 'GetJoyXpadIds', "args": 'Out<long, void>, OutArray<nn::hid::JoyXpadId> const&'},
       60: {"name": 'ActivateSixAxisSensor', "args": 'nn::hid::BasicXpadId'},
       61: {"name": 'DeactivateSixAxisSensor', "args": 'nn::hid::BasicXpadId'},
       62: {"name": 'GetSixAxisSensorLifoHandle', "args": 'Out<NativeHandle, void>, nn::hid::BasicXpadId'},
       63: {"name": 'ActivateJoySixAxisSensor', "args": 'nn::hid::JoyXpadId'},
       64: {"name": 'DeactivateJoySixAxisSensor', "args": 'nn::hid::JoyXpadId'},
       65: {"name": 'GetJoySixAxisSensorLifoHandle', "args": 'Out<NativeHandle, void>, nn::hid::JoyXpadId'},
       66: {"name": 'StartSixAxisSensor', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       67: {"name": 'StopSixAxisSensor', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       68: {"name": 'IsSixAxisSensorFusionEnabled', "args": 'Out<bool, void>, nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       69: {"name": 'EnableSixAxisSensorFusion', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle, bool'},
       70: {"name": 'SetSixAxisSensorFusionParameters', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle, float, float'},
       71: {"name": 'GetSixAxisSensorFusionParameters', "args": 'Out<float, void>, Out<float, void>, nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       72: {"name": 'ResetSixAxisSensorFusionParameters', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       73: {"name": 'SetAccelerometerParameters', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle, float, float'},
       74: {"name": 'GetAccelerometerParameters', "args": 'Out<float, void>, Out<float, void>, nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       75: {"name": 'ResetAccelerometerParameters', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       76: {"name": 'SetAccelerometerPlayMode', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle, unsigned int'},
       77: {"name": 'GetAccelerometerPlayMode', "args": 'Out<unsigned int, void>, nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       78: {"name": 'ResetAccelerometerPlayMode', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       79: {"name": 'SetGyroscopeZeroDriftMode', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle, unsigned int'},
       80: {"name": 'GetGyroscopeZeroDriftMode', "args": 'Out<unsigned int, void>, nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       81: {"name": 'ResetGyroscopeZeroDriftMode', "args": 'nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
       82: {"name": 'IsSixAxisSensorAtRest', "args": 'Out<bool, void>, nn::applet::AppletResourceUserId, nn::hid::SixAxisSensorHandle'},
      100: {"name": 'SetSupportedNpadStyleSet', "args": 'nn::applet::AppletResourceUserId, nn::util::BitFlagSet<32, nn::hid::NpadStyleTag>'},
      101: {"name": 'GetSupportedNpadStyleSet', "args": 'nn::applet::AppletResourceUserId, Out<nn::util::BitFlagSet<32, nn::hid::NpadStyleTag>, void>'},
      102: {"name": 'SetSupportedNpadIdType', "args": 'nn::applet::AppletResourceUserId, InArray<unsigned int> const&'},
      103: {"name": 'ActivateNpad', "args": 'nn::applet::AppletResourceUserId'},
      104: {"name": 'DeactivateNpad', "args": 'nn::applet::AppletResourceUserId'},
      106: {"name": 'AcquireNpadStyleSetUpdateEventHandle', "args": 'nn::applet::AppletResourceUserId, Out<NativeHandle, void>, unsigned int, unsigned long'},
      107: {"name": 'DisconnectNpad', "args": 'nn::applet::AppletResourceUserId, unsigned int'},
      108: {"name": 'GetPlayerLedPattern', "args": 'Out<unsigned long, void>, unsigned int'},
      120: {"name": 'SetNpadJoyHoldType', "args": 'nn::applet::AppletResourceUserId, long'},
      121: {"name": 'GetNpadJoyHoldType', "args": 'nn::applet::AppletResourceUserId, Out<long, void>'},
      122: {"name": 'SetNpadJoyAssignmentModeSingleByDefault', "args": 'nn::applet::AppletResourceUserId, unsigned int'},
      123: {"name": 'SetNpadJoyAssignmentModeSingle', "args": 'nn::applet::AppletResourceUserId, unsigned int, long'},
      124: {"name": 'SetNpadJoyAssignmentModeDual', "args": 'nn::applet::AppletResourceUserId, unsigned int'},
      125: {"name": 'MergeSingleJoyAsDualJoy', "args": 'nn::applet::AppletResourceUserId, unsigned int, unsigned int'},
      126: {"name": 'StartLrAssignmentMode', "args": 'nn::applet::AppletResourceUserId'},
      127: {"name": 'StopLrAssignmentMode', "args": 'nn::applet::AppletResourceUserId'},
      128: {"name": 'SetNpadHandheldActivationMode', "args": 'nn::applet::AppletResourceUserId, long'},
      129: {"name": 'GetNpadHandheldActivationMode', "args": 'nn::applet::AppletResourceUserId, Out<long, void>'},
      130: {"name": 'SwapNpadAssignment', "args": 'nn::applet::AppletResourceUserId, unsigned int, unsigned int'},
      131: {"name": 'IsUnintendedHomeButtonInputProtectionEnabled', "args": 'Out<bool, void>, nn::applet::AppletResourceUserId, unsigned int'},
      132: {"name": 'EnableUnintendedHomeButtonInputProtection', "args": 'nn::applet::AppletResourceUserId, unsigned int, bool'},
      200: {"name": 'GetVibrationDeviceInfo', "args": 'Out<nn::hid::VibrationDeviceInfoForIpc, void>, nn::hid::VibrationDeviceHandle'},
      201: {"name": 'SendVibrationValue', "args": 'nn::applet::AppletResourceUserId, nn::hid::VibrationDeviceHandle, nn::hid::VibrationValue const&'},
      202: {"name": 'GetActualVibrationValue', "args": 'Out<nn::hid::VibrationValue, void>, nn::applet::AppletResourceUserId, nn::hid::VibrationDeviceHandle'},
      203: {"name": 'CreateActiveVibrationDeviceList', "args": 'Out<SharedPointer<nn::hid::IActiveVibrationDeviceList>, void>'},
      204: {"name": 'PermitVibration', "args": 'bool'},
      205: {"name": 'IsVibrationPermitted', "args": 'Out<bool, void>'},
      206: {"name": 'SendVibrationValues', "args": 'nn::applet::AppletResourceUserId, InArray<nn::hid::VibrationDeviceHandle> const&, InArray<nn::hid::VibrationValue> const&'},
     1000: {"name": 'SetNpadCommunicationMode', "args": 'nn::applet::AppletResourceUserId, long'},
     1001: {"name": 'GetNpadCommunicationMode', "args": 'Out<long, void>'},
  },
  'nn::hid::IAppletResource': {
        0: {"name": 'GetSharedMemoryHandle', "args": 'Out<NativeHandle, void>'},
  },
  'nn::hid::IActiveVibrationDeviceList': {
        0: {"name": 'ActivateVibrationDevice', "args": 'nn::hid::VibrationDeviceHandle'},
  },
  'nn::hid::IHidSystemServer': {
       31: {"name": 'SendKeyboardLockKeyEvent', "args": 'nn::util::BitFlagSet<32, nn::hid::system::KeyboardLockKeyEvent>'},
      101: {"name": 'AcquireHomeButtonEventHandle', "args": 'Out<NativeHandle, void>, nn::applet::AppletResourceUserId'},
      111: {"name": 'ActivateHomeButton', "args": 'nn::applet::AppletResourceUserId'},
      121: {"name": 'AcquireSleepButtonEventHandle', "args": 'Out<NativeHandle, void>, nn::applet::AppletResourceUserId'},
      131: {"name": 'ActivateSleepButton', "args": 'nn::applet::AppletResourceUserId'},
      141: {"name": 'AcquireCaptureButtonEventHandle', "args": 'Out<NativeHandle, void>, nn::applet::AppletResourceUserId'},
      151: {"name": 'ActivateCaptureButton', "args": 'nn::applet::AppletResourceUserId'},
      210: {"name": 'AcquireNfcDeviceUpdateEventHandle', "args": 'Out<NativeHandle, void>'},
      211: {"name": 'GetNpadsWithNfc', "args": 'Out<long, void>, OutArray<unsigned int> const&'},
      212: {"name": 'AcquireNfcActivateEventHandle', "args": 'Out<NativeHandle, void>, unsigned int'},
      213: {"name": 'ActivateNfc', "args": 'unsigned int, bool, nn::applet::AppletResourceUserId'},
      230: {"name": 'AcquireIrSensorEventHandle', "args": 'Out<NativeHandle, void>, unsigned int'},
      231: {"name": 'ActivateIrSensor', "args": 'unsigned int, bool, nn::applet::AppletResourceUserId'},
      322: {"name": 'GetIrSensorState', "args": 'unsigned int, Out<long, void>, nn::applet::AppletResourceUserId'},
      323: {"name": 'GetXcdHandleForNpadWithIrSensor', "args": 'unsigned int, Out<unsigned long, void>, nn::applet::AppletResourceUserId'},
      301: {"name": 'ActivateNpadSystem', "args": 'unsigned int'},
      303: {"name": 'ApplyNpadSystemCommonPolicy', "args": 'nn::applet::AppletResourceUserId'},
      304: {"name": 'EnableAssigningSingleOnSlSrPress', "args": 'nn::applet::AppletResourceUserId'},
      305: {"name": 'DisableAssigningSingleOnSlSrPress', "args": 'nn::applet::AppletResourceUserId'},
      500: {"name": 'SetAppletResourceUserId', "args": 'nn::applet::AppletResourceUserId'},
      501: {"name": 'RegisterAppletResourceUserId', "args": 'nn::applet::AppletResourceUserId, bool'},
      502: {"name": 'UnregisterAppletResourceUserId', "args": 'nn::applet::AppletResourceUserId'},
      503: {"name": 'EnableAppletToGetInput', "args": 'nn::applet::AppletResourceUserId, bool'},
      504: {"name": 'SetAruidValidForVibration', "args": 'nn::applet::AppletResourceUserId, bool'},
      510: {"name": 'SetVibrationMasterVolume', "args": 'float'},
      511: {"name": 'GetVibrationMasterVolume', "args": 'Out<float, void>'},
      520: {"name": 'EnableHandheldHids', "args": ''},
      521: {"name": 'DisableHandheldHids', "args": ''},
      700: {"name": 'ActivateUniquePad', "args": 'nn::applet::AppletResourceUserId, nn::hid::system::UniquePadId'},
      702: {"name": 'AcquireUniquePadConnectionEventHandle', "args": 'Out<NativeHandle, void>'},
      703: {"name": 'GetUniquePadIds', "args": 'Out<long, void>, OutArray<nn::hid::system::UniquePadId> const&'},
      751: {"name": 'AcquireJoyDetachOnBluetoothOffEventHandle', "args": 'Out<NativeHandle, void>, nn::applet::AppletResourceUserId'},
      800: {"name": 'ListSixAxisSensorHandles', "args": 'Out<long, void>, OutArray<nn::hid::system::UniqueSixAxisSensorHandle> const&, nn::hid::system::UniquePadId'},
      801: {"name": 'IsSixAxisSensorUserCalibrationSupported', "args": 'Out<bool, void>, nn::hid::system::UniqueSixAxisSensorHandle'},
      802: {"name": 'ResetSixAxisSensorCalibrationValues', "args": 'nn::hid::system::UniqueSixAxisSensorHandle'},
      803: {"name": 'StartSixAxisSensorUserCalibration', "args": 'nn::hid::system::UniqueSixAxisSensorHandle'},
      804: {"name": 'CancelSixAxisSensorUserCalibration', "args": 'nn::hid::system::UniqueSixAxisSensorHandle'},
      821: {"name": 'StartAnalogStickManualCalibration', "args": 'nn::hid::system::UniquePadId, long'},
      822: {"name": 'RetryCurrentAnalogStickManualCalibrationStage', "args": 'nn::hid::system::UniquePadId, long'},
      823: {"name": 'CancelAnalogStickManualCalibration', "args": 'nn::hid::system::UniquePadId, long'},
      824: {"name": 'ResetAnalogStickManualCalibration', "args": 'nn::hid::system::UniquePadId, long'},
      900: {"name": 'ActivateInputDetector', "args": 'nn::applet::AppletResourceUserId'},
      901: {"name": 'NotifyInputDetector', "args": 'nn::util::BitFlagSet<32, nn::hid::system::InputSourceId>'},
  },
  'nn::ldn::detail::IUserServiceCreator': {
        0: {},
  },
  'nn::ldn::detail::IUserLocalCommunicationService': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
      100: {},
      101: {},
      102: {},
      103: {},
      200: {},
      201: {},
      202: {},
      203: {},
      204: {},
      205: {},
      206: {},
      207: {},
      208: {},
      209: {},
      300: {},
      301: {},
      302: {},
      303: {},
      304: {},
      400: {},
      401: {},
  },
  'nn::ldn::detail::IMonitorServiceCreator': {
        0: {},
  },
  'nn::ldn::detail::IMonitorService': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
      100: {},
      101: {},
  },
  'nn::ldn::detail::ISystemServiceCreator': {
        0: {},
  },
  'nn::ldn::detail::ISystemLocalCommunicationService': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
      100: {},
      101: {},
      102: {},
      103: {},
      200: {},
      201: {},
      202: {},
      203: {},
      204: {},
      205: {},
      206: {},
      207: {},
      208: {},
      209: {},
      300: {},
      301: {},
      302: {},
      303: {},
      304: {},
      400: {},
      401: {},
  },
  'nn::fgm::sf::ISession': {
        0: {"name": 'Initialize', "args": 'Out<SharedPointer<nn::fgm::sf::IRequest>, void>'},
  },
  'nn::fgm::sf::IRequest': {
        0: {"name": 'Initialize', "args": 'Out<NativeHandle, void>, nn::fgm::Module, unsigned long'},
        1: {"name": 'Set', "args": 'unsigned int, unsigned int'},
        2: {"name": 'Get', "args": 'Out<unsigned int, void>'},
        3: {"name": 'Cancel', "args": ''},
  },
  'nn::gpio::IManager': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
  },
  'nn::gpio::IPadSession': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
       14: {},
       15: {},
  },
  'nn::i2c::IManager': {
        0: {},
        1: {},
        2: {},
        3: {},
  },
  'nn::i2c::ISession': {
        0: {},
        1: {},
        2: {},
       10: {},
       11: {},
       12: {},
  },
  'nn::pcv::detail::IPcvService': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
       10: {},
       11: {},
       12: {},
       13: {},
       14: {},
       15: {},
       16: {},
       17: {},
  },
  'nn::pcv::IImmediateManager': {
        0: {"name": 'SetClockRate', "args": 'int, unsigned int'},
  },
  'nn::pwm::IManager': {
        0: {},
        1: {},
  },
  'nn::pwm::IChannelSession': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
  },

  # nvn
  'nv::MemoryProfiler::IMemoryProfiler': {
        0: {},
        1: {},
  },
  'nns::nvdrv::INvDrvServices': {
        0: {},
        1: {},
        2: {},
        3: {},
        4: {},
        5: {},
        6: {},
        7: {},
        8: {},
        9: {},
  },
  'nns::hosbinder::IHOSBinderDriver': {
        0: {},
        1: {},
        2: {},
  },

  # nnDisplay
  'nn::visrv::sf::IManagerRootService': {
        2: {"name": 'GetDisplayService', "args": 'Out<SharedPointer<nn::visrv::sf::IApplicationDisplayService>, void>, unsigned int'},
        3: {"name": 'GetDisplayServiceWithProxyNameExchange', "args": 'Out<SharedPointer<nn::visrv::sf::IApplicationDisplayService>, void>, unsigned int, nn::vi::ProxyName'},
  },
  'nn::visrv::sf::IApplicationDisplayService': {
      100: {"name": 'GetRelayService', "args": 'Out<SharedPointer<nns::hosbinder::IHOSBinderDriver>, void>'},
      101: {"name": 'GetSystemDisplayService', "args": 'Out<SharedPointer<nn::visrv::sf::ISystemDisplayService>, void>'},
      102: {"name": 'GetManagerDisplayService', "args": 'Out<SharedPointer<nn::visrv::sf::IManagerDisplayService>, void>'},
     1000: {"name": 'ListDisplays', "args": 'Out<long, void>, OutArray<nn::vi::DisplayInfo> const&'},
     1010: {"name": 'OpenDisplay', "args": 'Out<unsigned long, void>, nn::vi::DisplayName const&'},
     1011: {"name": 'OpenDefaultDisplay', "args": 'Out<unsigned long, void>'},
     1020: {"name": 'CloseDisplay', "args": 'unsigned long'},
     1101: {"name": 'SetDisplayEnabled', "args": 'unsigned long, bool'},
     1102: {"name": 'GetDisplayResolution', "args": 'Out<long, void>, Out<long, void>, unsigned long'},
     2020: {"name": 'OpenLayer', "args": 'Out<long, void>, OutBuffer const&, unsigned long, nn::vi::DisplayName const&, nn::applet::AppletResourceUserId'},
     2021: {"name": 'CloseLayer', "args": 'unsigned long'},
     2030: {"name": 'CreateStrayLayer', "args": 'Out<unsigned long, void>, Out<long, void>, OutBuffer const&, unsigned long, unsigned int'},
     2031: {"name": 'DestroyStrayLayer', "args": 'unsigned long'},
     2101: {"name": 'SetLayerScalingMode', "args": 'unsigned long, unsigned int'},
     5202: {"name": 'GetDisplayVsyncEvent', "args": 'Out<NativeHandle, void>, unsigned long'},
  },
  'nns::hosbinder::IHOSBinderDriver': {
        0: {"name": 'TransactParcel', "args": 'int, unsigned int, InBuffer const&, OutBuffer const&, unsigned int'},
        1: {"name": 'AdjustRefcount', "args": 'int, int, int'},
        2: {"name": 'GetNativeHandle', "args": 'int, unsigned int, Out<NativeHandle, void>'},
  },
  'nn::visrv::sf::ISystemDisplayService': {
     1200: {"name": 'GetZOrderCountMin', "args": 'Out<long, void>, unsigned long'},
     1202: {"name": 'GetZOrderCountMax', "args": 'Out<long, void>, unsigned long'},
     1203: {"name": 'GetDisplayLogicalResolution', "args": 'Out<int, void>, Out<int, void>, unsigned long'},
     2201: {"name": 'SetLayerPosition', "args": 'unsigned long, float, float'},
     2203: {"name": 'SetLayerSize', "args": 'unsigned long, long, long'},
     2204: {"name": 'GetLayerZ', "args": 'Out<long, void>, unsigned long'},
     2205: {"name": 'SetLayerZ', "args": 'unsigned long, long'},
     2207: {"name": 'SetLayerVisibility', "args": 'unsigned long, bool'},
     2209: {"name": 'SetLayerAlpha', "args": 'unsigned long, float'},
     2312: {"name": 'CreateStrayLayer', "args": 'Out<unsigned long, void>, Out<long, void>, OutBuffer const&, unsigned long, unsigned int'},
     3000: {"name": 'ListDisplayModes', "args": 'Out<long, void>, OutArray<nn::vi::DisplayModeInfo> const&, unsigned long'},
     3001: {"name": 'ListDisplayRgbRanges', "args": 'Out<long, void>, OutArray<unsigned int> const&, unsigned long'},
     3002: {"name": 'ListDisplayContentTypes', "args": 'Out<long, void>, OutArray<unsigned int> const&, unsigned long'},
     3200: {"name": 'GetDisplayMode', "args": 'Out<nn::vi::DisplayModeInfo, void>, unsigned long'},
     3201: {"name": 'SetDisplayMode', "args": 'unsigned long, nn::vi::DisplayModeInfo const&'},
     3202: {"name": 'GetDisplayUnderscan', "args": 'Out<long, void>, unsigned long'},
     3203: {"name": 'SetDisplayUnderscan', "args": 'unsigned long, long'},
     3204: {"name": 'GetDisplayContentType', "args": 'Out<unsigned int, void>, unsigned long'},
     3205: {"name": 'SetDisplayContentType', "args": 'unsigned long, unsigned int'},
     3206: {"name": 'GetDisplayRgbRange', "args": 'Out<unsigned int, void>, unsigned long'},
     3207: {"name": 'SetDisplayRgbRange', "args": 'unsigned long, unsigned int'},
     3208: {"name": 'GetDisplayCmuMode', "args": 'Out<unsigned int, void>, unsigned long'},
     3209: {"name": 'SetDisplayCmuMode', "args": 'unsigned long, unsigned int'},
     3210: {"name": 'GetDisplayContrastRatio', "args": 'Out<float, void>, unsigned long'},
     3211: {"name": 'SetDisplayContrastRatio', "args": 'unsigned long, float'},
     3214: {"name": 'GetDisplayGamma', "args": 'Out<float, void>, unsigned long'},
     3215: {"name": 'SetDisplayGamma', "args": 'unsigned long, float'},
     3216: {"name": 'GetDisplayCmuLuma', "args": 'Out<float, void>, unsigned long'},
     3217: {"name": 'SetDisplayCmuLuma', "args": 'unsigned long, float'},
  },
  'nn::visrv::sf::IManagerDisplayService': {
     2010: {"name": 'CreateManagedLayer', "args": 'Out<unsigned long, void>, unsigned long, unsigned int, nn::applet::AppletResourceUserId'},
     2011: {"name": 'DestroyManagedLayer', "args": 'unsigned long'},
     2300: {"name": 'AcquireLayerTexturePresentingEvent', "args": 'Out<NativeHandle, void>, unsigned long'},
     2301: {"name": 'ReleaseLayerTexturePresentingEvent', "args": 'unsigned long'},
     2302: {"name": 'GetDisplayHotplugEvent', "args": 'Out<NativeHandle, void>, unsigned long'},
     2402: {"name": 'GetDisplayHotplugState', "args": 'Out<unsigned int, void>, unsigned long'},
     4201: {"name": 'SetDisplayAlpha', "args": 'unsigned long, float'},
     4203: {"name": 'SetDisplayLayerStack', "args": 'unsigned long, unsigned int'},
     4205: {"name": 'SetDisplayPowerState', "args": 'unsigned long, unsigned int'},
     6000: {"name": 'AddToLayerStack', "args": 'unsigned long, unsigned int'},
     6001: {"name": 'RemoveFromLayerStack', "args": 'unsigned long, unsigned int'},
     7000: {"name": 'SetContentVisibility', "args": 'bool'},
     8000: {"name": 'SetConductorLayer', "args": 'unsigned long, bool'},
  },
  'nn::visrv::sf::ISystemRootService': {
        1: {"name": 'GetDisplayService', "args": 'Out<SharedPointer<nn::visrv::sf::IApplicationDisplayService>, void>, unsigned int'},
        3: {"name": 'GetDisplayServiceWithProxyNameExchange', "args": 'Out<SharedPointer<nn::visrv::sf::IApplicationDisplayService>, void>, unsigned int, nn::vi::ProxyName'},
  },
  'nn::visrv::sf::IApplicationRootService': {
        0: {"name": 'GetDisplayService', "args": 'Out<SharedPointer<nn::visrv::sf::IApplicationDisplayService>, void>, unsigned int'},
  },

  # multimedia
  'nn::mmnv::IRequest': {
        0: {},
        1: {},
        2: {},
        3: {},
  },


}